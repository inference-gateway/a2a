// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/inference-gateway/a2a/adk"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeTaskResultProcessor struct {
	ProcessToolResultStub        func(string) *adk.Message
	processToolResultMutex       sync.RWMutex
	processToolResultArgsForCall []struct {
		arg1 string
	}
	processToolResultReturns struct {
		result1 *adk.Message
	}
	processToolResultReturnsOnCall map[int]struct {
		result1 *adk.Message
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskResultProcessor) ProcessToolResult(arg1 string) *adk.Message {
	fake.processToolResultMutex.Lock()
	ret, specificReturn := fake.processToolResultReturnsOnCall[len(fake.processToolResultArgsForCall)]
	fake.processToolResultArgsForCall = append(fake.processToolResultArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ProcessToolResultStub
	fakeReturns := fake.processToolResultReturns
	fake.recordInvocation("ProcessToolResult", []interface{}{arg1})
	fake.processToolResultMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskResultProcessor) ProcessToolResultCallCount() int {
	fake.processToolResultMutex.RLock()
	defer fake.processToolResultMutex.RUnlock()
	return len(fake.processToolResultArgsForCall)
}

func (fake *FakeTaskResultProcessor) ProcessToolResultCalls(stub func(string) *adk.Message) {
	fake.processToolResultMutex.Lock()
	defer fake.processToolResultMutex.Unlock()
	fake.ProcessToolResultStub = stub
}

func (fake *FakeTaskResultProcessor) ProcessToolResultArgsForCall(i int) string {
	fake.processToolResultMutex.RLock()
	defer fake.processToolResultMutex.RUnlock()
	argsForCall := fake.processToolResultArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskResultProcessor) ProcessToolResultReturns(result1 *adk.Message) {
	fake.processToolResultMutex.Lock()
	defer fake.processToolResultMutex.Unlock()
	fake.ProcessToolResultStub = nil
	fake.processToolResultReturns = struct {
		result1 *adk.Message
	}{result1}
}

func (fake *FakeTaskResultProcessor) ProcessToolResultReturnsOnCall(i int, result1 *adk.Message) {
	fake.processToolResultMutex.Lock()
	defer fake.processToolResultMutex.Unlock()
	fake.ProcessToolResultStub = nil
	if fake.processToolResultReturnsOnCall == nil {
		fake.processToolResultReturnsOnCall = make(map[int]struct {
			result1 *adk.Message
		})
	}
	fake.processToolResultReturnsOnCall[i] = struct {
		result1 *adk.Message
	}{result1}
}

func (fake *FakeTaskResultProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processToolResultMutex.RLock()
	defer fake.processToolResultMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskResultProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.TaskResultProcessor = new(FakeTaskResultProcessor)
