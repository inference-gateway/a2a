// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/a2a/adk"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeLLMClient struct {
	CreateChatCompletionStub        func(context.Context, []adk.Message) (*adk.Message, error)
	createChatCompletionMutex       sync.RWMutex
	createChatCompletionArgsForCall []struct {
		arg1 context.Context
		arg2 []adk.Message
	}
	createChatCompletionReturns struct {
		result1 *adk.Message
		result2 error
	}
	createChatCompletionReturnsOnCall map[int]struct {
		result1 *adk.Message
		result2 error
	}
	CreateStreamingChatCompletionStub        func(context.Context, []adk.Message) (<-chan *adk.Message, <-chan error)
	createStreamingChatCompletionMutex       sync.RWMutex
	createStreamingChatCompletionArgsForCall []struct {
		arg1 context.Context
		arg2 []adk.Message
	}
	createStreamingChatCompletionReturns struct {
		result1 <-chan *adk.Message
		result2 <-chan error
	}
	createStreamingChatCompletionReturnsOnCall map[int]struct {
		result1 <-chan *adk.Message
		result2 <-chan error
	}
	HealthCheckStub        func(context.Context) error
	healthCheckMutex       sync.RWMutex
	healthCheckArgsForCall []struct {
		arg1 context.Context
	}
	healthCheckReturns struct {
		result1 error
	}
	healthCheckReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLLMClient) CreateChatCompletion(arg1 context.Context, arg2 []adk.Message) (*adk.Message, error) {
	var arg2Copy []adk.Message
	if arg2 != nil {
		arg2Copy = make([]adk.Message, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createChatCompletionMutex.Lock()
	ret, specificReturn := fake.createChatCompletionReturnsOnCall[len(fake.createChatCompletionArgsForCall)]
	fake.createChatCompletionArgsForCall = append(fake.createChatCompletionArgsForCall, struct {
		arg1 context.Context
		arg2 []adk.Message
	}{arg1, arg2Copy})
	stub := fake.CreateChatCompletionStub
	fakeReturns := fake.createChatCompletionReturns
	fake.recordInvocation("CreateChatCompletion", []interface{}{arg1, arg2Copy})
	fake.createChatCompletionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLLMClient) CreateChatCompletionCallCount() int {
	fake.createChatCompletionMutex.RLock()
	defer fake.createChatCompletionMutex.RUnlock()
	return len(fake.createChatCompletionArgsForCall)
}

func (fake *FakeLLMClient) CreateChatCompletionCalls(stub func(context.Context, []adk.Message) (*adk.Message, error)) {
	fake.createChatCompletionMutex.Lock()
	defer fake.createChatCompletionMutex.Unlock()
	fake.CreateChatCompletionStub = stub
}

func (fake *FakeLLMClient) CreateChatCompletionArgsForCall(i int) (context.Context, []adk.Message) {
	fake.createChatCompletionMutex.RLock()
	defer fake.createChatCompletionMutex.RUnlock()
	argsForCall := fake.createChatCompletionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLLMClient) CreateChatCompletionReturns(result1 *adk.Message, result2 error) {
	fake.createChatCompletionMutex.Lock()
	defer fake.createChatCompletionMutex.Unlock()
	fake.CreateChatCompletionStub = nil
	fake.createChatCompletionReturns = struct {
		result1 *adk.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeLLMClient) CreateChatCompletionReturnsOnCall(i int, result1 *adk.Message, result2 error) {
	fake.createChatCompletionMutex.Lock()
	defer fake.createChatCompletionMutex.Unlock()
	fake.CreateChatCompletionStub = nil
	if fake.createChatCompletionReturnsOnCall == nil {
		fake.createChatCompletionReturnsOnCall = make(map[int]struct {
			result1 *adk.Message
			result2 error
		})
	}
	fake.createChatCompletionReturnsOnCall[i] = struct {
		result1 *adk.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeLLMClient) CreateStreamingChatCompletion(arg1 context.Context, arg2 []adk.Message) (<-chan *adk.Message, <-chan error) {
	var arg2Copy []adk.Message
	if arg2 != nil {
		arg2Copy = make([]adk.Message, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createStreamingChatCompletionMutex.Lock()
	ret, specificReturn := fake.createStreamingChatCompletionReturnsOnCall[len(fake.createStreamingChatCompletionArgsForCall)]
	fake.createStreamingChatCompletionArgsForCall = append(fake.createStreamingChatCompletionArgsForCall, struct {
		arg1 context.Context
		arg2 []adk.Message
	}{arg1, arg2Copy})
	stub := fake.CreateStreamingChatCompletionStub
	fakeReturns := fake.createStreamingChatCompletionReturns
	fake.recordInvocation("CreateStreamingChatCompletion", []interface{}{arg1, arg2Copy})
	fake.createStreamingChatCompletionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLLMClient) CreateStreamingChatCompletionCallCount() int {
	fake.createStreamingChatCompletionMutex.RLock()
	defer fake.createStreamingChatCompletionMutex.RUnlock()
	return len(fake.createStreamingChatCompletionArgsForCall)
}

func (fake *FakeLLMClient) CreateStreamingChatCompletionCalls(stub func(context.Context, []adk.Message) (<-chan *adk.Message, <-chan error)) {
	fake.createStreamingChatCompletionMutex.Lock()
	defer fake.createStreamingChatCompletionMutex.Unlock()
	fake.CreateStreamingChatCompletionStub = stub
}

func (fake *FakeLLMClient) CreateStreamingChatCompletionArgsForCall(i int) (context.Context, []adk.Message) {
	fake.createStreamingChatCompletionMutex.RLock()
	defer fake.createStreamingChatCompletionMutex.RUnlock()
	argsForCall := fake.createStreamingChatCompletionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLLMClient) CreateStreamingChatCompletionReturns(result1 <-chan *adk.Message, result2 <-chan error) {
	fake.createStreamingChatCompletionMutex.Lock()
	defer fake.createStreamingChatCompletionMutex.Unlock()
	fake.CreateStreamingChatCompletionStub = nil
	fake.createStreamingChatCompletionReturns = struct {
		result1 <-chan *adk.Message
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeLLMClient) CreateStreamingChatCompletionReturnsOnCall(i int, result1 <-chan *adk.Message, result2 <-chan error) {
	fake.createStreamingChatCompletionMutex.Lock()
	defer fake.createStreamingChatCompletionMutex.Unlock()
	fake.CreateStreamingChatCompletionStub = nil
	if fake.createStreamingChatCompletionReturnsOnCall == nil {
		fake.createStreamingChatCompletionReturnsOnCall = make(map[int]struct {
			result1 <-chan *adk.Message
			result2 <-chan error
		})
	}
	fake.createStreamingChatCompletionReturnsOnCall[i] = struct {
		result1 <-chan *adk.Message
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeLLMClient) HealthCheck(arg1 context.Context) error {
	fake.healthCheckMutex.Lock()
	ret, specificReturn := fake.healthCheckReturnsOnCall[len(fake.healthCheckArgsForCall)]
	fake.healthCheckArgsForCall = append(fake.healthCheckArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.HealthCheckStub
	fakeReturns := fake.healthCheckReturns
	fake.recordInvocation("HealthCheck", []interface{}{arg1})
	fake.healthCheckMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLLMClient) HealthCheckCallCount() int {
	fake.healthCheckMutex.RLock()
	defer fake.healthCheckMutex.RUnlock()
	return len(fake.healthCheckArgsForCall)
}

func (fake *FakeLLMClient) HealthCheckCalls(stub func(context.Context) error) {
	fake.healthCheckMutex.Lock()
	defer fake.healthCheckMutex.Unlock()
	fake.HealthCheckStub = stub
}

func (fake *FakeLLMClient) HealthCheckArgsForCall(i int) context.Context {
	fake.healthCheckMutex.RLock()
	defer fake.healthCheckMutex.RUnlock()
	argsForCall := fake.healthCheckArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLLMClient) HealthCheckReturns(result1 error) {
	fake.healthCheckMutex.Lock()
	defer fake.healthCheckMutex.Unlock()
	fake.HealthCheckStub = nil
	fake.healthCheckReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLLMClient) HealthCheckReturnsOnCall(i int, result1 error) {
	fake.healthCheckMutex.Lock()
	defer fake.healthCheckMutex.Unlock()
	fake.HealthCheckStub = nil
	if fake.healthCheckReturnsOnCall == nil {
		fake.healthCheckReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.healthCheckReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLLMClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createChatCompletionMutex.RLock()
	defer fake.createChatCompletionMutex.RUnlock()
	fake.createStreamingChatCompletionMutex.RLock()
	defer fake.createStreamingChatCompletionMutex.RUnlock()
	fake.healthCheckMutex.RLock()
	defer fake.healthCheckMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLLMClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.LLMClient = new(FakeLLMClient)
