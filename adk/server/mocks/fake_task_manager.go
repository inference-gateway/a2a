// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/inference-gateway/a2a/adk"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeTaskManager struct {
	CancelTaskStub        func(string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		arg1 string
	}
	cancelTaskReturns struct {
		result1 error
	}
	cancelTaskReturnsOnCall map[int]struct {
		result1 error
	}
	CleanupCompletedTasksStub        func()
	cleanupCompletedTasksMutex       sync.RWMutex
	cleanupCompletedTasksArgsForCall []struct {
	}
	CreateTaskStub        func(string, adk.TaskState, *adk.Message) *adk.Task
	createTaskMutex       sync.RWMutex
	createTaskArgsForCall []struct {
		arg1 string
		arg2 adk.TaskState
		arg3 *adk.Message
	}
	createTaskReturns struct {
		result1 *adk.Task
	}
	createTaskReturnsOnCall map[int]struct {
		result1 *adk.Task
	}
	DeleteTaskPushNotificationConfigStub        func(adk.DeleteTaskPushNotificationConfigParams) error
	deleteTaskPushNotificationConfigMutex       sync.RWMutex
	deleteTaskPushNotificationConfigArgsForCall []struct {
		arg1 adk.DeleteTaskPushNotificationConfigParams
	}
	deleteTaskPushNotificationConfigReturns struct {
		result1 error
	}
	deleteTaskPushNotificationConfigReturnsOnCall map[int]struct {
		result1 error
	}
	GetConversationHistoryStub        func(string) []adk.Message
	getConversationHistoryMutex       sync.RWMutex
	getConversationHistoryArgsForCall []struct {
		arg1 string
	}
	getConversationHistoryReturns struct {
		result1 []adk.Message
	}
	getConversationHistoryReturnsOnCall map[int]struct {
		result1 []adk.Message
	}
	GetTaskStub        func(string) (*adk.Task, bool)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		arg1 string
	}
	getTaskReturns struct {
		result1 *adk.Task
		result2 bool
	}
	getTaskReturnsOnCall map[int]struct {
		result1 *adk.Task
		result2 bool
	}
	GetTaskPushNotificationConfigStub        func(adk.GetTaskPushNotificationConfigParams) (*adk.TaskPushNotificationConfig, error)
	getTaskPushNotificationConfigMutex       sync.RWMutex
	getTaskPushNotificationConfigArgsForCall []struct {
		arg1 adk.GetTaskPushNotificationConfigParams
	}
	getTaskPushNotificationConfigReturns struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}
	getTaskPushNotificationConfigReturnsOnCall map[int]struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}
	ListTaskPushNotificationConfigsStub        func(adk.ListTaskPushNotificationConfigParams) ([]adk.TaskPushNotificationConfig, error)
	listTaskPushNotificationConfigsMutex       sync.RWMutex
	listTaskPushNotificationConfigsArgsForCall []struct {
		arg1 adk.ListTaskPushNotificationConfigParams
	}
	listTaskPushNotificationConfigsReturns struct {
		result1 []adk.TaskPushNotificationConfig
		result2 error
	}
	listTaskPushNotificationConfigsReturnsOnCall map[int]struct {
		result1 []adk.TaskPushNotificationConfig
		result2 error
	}
	ListTasksStub        func(adk.TaskListParams) (*adk.TaskList, error)
	listTasksMutex       sync.RWMutex
	listTasksArgsForCall []struct {
		arg1 adk.TaskListParams
	}
	listTasksReturns struct {
		result1 *adk.TaskList
		result2 error
	}
	listTasksReturnsOnCall map[int]struct {
		result1 *adk.TaskList
		result2 error
	}
	PollTaskStatusStub        func(string, time.Duration, time.Duration) (*adk.Task, error)
	pollTaskStatusMutex       sync.RWMutex
	pollTaskStatusArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 time.Duration
	}
	pollTaskStatusReturns struct {
		result1 *adk.Task
		result2 error
	}
	pollTaskStatusReturnsOnCall map[int]struct {
		result1 *adk.Task
		result2 error
	}
	SetTaskPushNotificationConfigStub        func(adk.TaskPushNotificationConfig) (*adk.TaskPushNotificationConfig, error)
	setTaskPushNotificationConfigMutex       sync.RWMutex
	setTaskPushNotificationConfigArgsForCall []struct {
		arg1 adk.TaskPushNotificationConfig
	}
	setTaskPushNotificationConfigReturns struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}
	setTaskPushNotificationConfigReturnsOnCall map[int]struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}
	UpdateConversationHistoryStub        func(string, []adk.Message)
	updateConversationHistoryMutex       sync.RWMutex
	updateConversationHistoryArgsForCall []struct {
		arg1 string
		arg2 []adk.Message
	}
	UpdateTaskStub        func(string, adk.TaskState, *adk.Message) error
	updateTaskMutex       sync.RWMutex
	updateTaskArgsForCall []struct {
		arg1 string
		arg2 adk.TaskState
		arg3 *adk.Message
	}
	updateTaskReturns struct {
		result1 error
	}
	updateTaskReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskManager) CancelTask(arg1 string) error {
	fake.cancelTaskMutex.Lock()
	ret, specificReturn := fake.cancelTaskReturnsOnCall[len(fake.cancelTaskArgsForCall)]
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CancelTaskStub
	fakeReturns := fake.cancelTaskReturns
	fake.recordInvocation("CancelTask", []interface{}{arg1})
	fake.cancelTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskManager) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeTaskManager) CancelTaskCalls(stub func(string) error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = stub
}

func (fake *FakeTaskManager) CancelTaskArgsForCall(i int) string {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	argsForCall := fake.cancelTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) CancelTaskReturns(result1 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskManager) CancelTaskReturnsOnCall(i int, result1 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	if fake.cancelTaskReturnsOnCall == nil {
		fake.cancelTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskManager) CleanupCompletedTasks() {
	fake.cleanupCompletedTasksMutex.Lock()
	fake.cleanupCompletedTasksArgsForCall = append(fake.cleanupCompletedTasksArgsForCall, struct {
	}{})
	stub := fake.CleanupCompletedTasksStub
	fake.recordInvocation("CleanupCompletedTasks", []interface{}{})
	fake.cleanupCompletedTasksMutex.Unlock()
	if stub != nil {
		fake.CleanupCompletedTasksStub()
	}
}

func (fake *FakeTaskManager) CleanupCompletedTasksCallCount() int {
	fake.cleanupCompletedTasksMutex.RLock()
	defer fake.cleanupCompletedTasksMutex.RUnlock()
	return len(fake.cleanupCompletedTasksArgsForCall)
}

func (fake *FakeTaskManager) CleanupCompletedTasksCalls(stub func()) {
	fake.cleanupCompletedTasksMutex.Lock()
	defer fake.cleanupCompletedTasksMutex.Unlock()
	fake.CleanupCompletedTasksStub = stub
}

func (fake *FakeTaskManager) CreateTask(arg1 string, arg2 adk.TaskState, arg3 *adk.Message) *adk.Task {
	fake.createTaskMutex.Lock()
	ret, specificReturn := fake.createTaskReturnsOnCall[len(fake.createTaskArgsForCall)]
	fake.createTaskArgsForCall = append(fake.createTaskArgsForCall, struct {
		arg1 string
		arg2 adk.TaskState
		arg3 *adk.Message
	}{arg1, arg2, arg3})
	stub := fake.CreateTaskStub
	fakeReturns := fake.createTaskReturns
	fake.recordInvocation("CreateTask", []interface{}{arg1, arg2, arg3})
	fake.createTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskManager) CreateTaskCallCount() int {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return len(fake.createTaskArgsForCall)
}

func (fake *FakeTaskManager) CreateTaskCalls(stub func(string, adk.TaskState, *adk.Message) *adk.Task) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = stub
}

func (fake *FakeTaskManager) CreateTaskArgsForCall(i int) (string, adk.TaskState, *adk.Message) {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	argsForCall := fake.createTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskManager) CreateTaskReturns(result1 *adk.Task) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = nil
	fake.createTaskReturns = struct {
		result1 *adk.Task
	}{result1}
}

func (fake *FakeTaskManager) CreateTaskReturnsOnCall(i int, result1 *adk.Task) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = nil
	if fake.createTaskReturnsOnCall == nil {
		fake.createTaskReturnsOnCall = make(map[int]struct {
			result1 *adk.Task
		})
	}
	fake.createTaskReturnsOnCall[i] = struct {
		result1 *adk.Task
	}{result1}
}

func (fake *FakeTaskManager) DeleteTaskPushNotificationConfig(arg1 adk.DeleteTaskPushNotificationConfigParams) error {
	fake.deleteTaskPushNotificationConfigMutex.Lock()
	ret, specificReturn := fake.deleteTaskPushNotificationConfigReturnsOnCall[len(fake.deleteTaskPushNotificationConfigArgsForCall)]
	fake.deleteTaskPushNotificationConfigArgsForCall = append(fake.deleteTaskPushNotificationConfigArgsForCall, struct {
		arg1 adk.DeleteTaskPushNotificationConfigParams
	}{arg1})
	stub := fake.DeleteTaskPushNotificationConfigStub
	fakeReturns := fake.deleteTaskPushNotificationConfigReturns
	fake.recordInvocation("DeleteTaskPushNotificationConfig", []interface{}{arg1})
	fake.deleteTaskPushNotificationConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskManager) DeleteTaskPushNotificationConfigCallCount() int {
	fake.deleteTaskPushNotificationConfigMutex.RLock()
	defer fake.deleteTaskPushNotificationConfigMutex.RUnlock()
	return len(fake.deleteTaskPushNotificationConfigArgsForCall)
}

func (fake *FakeTaskManager) DeleteTaskPushNotificationConfigCalls(stub func(adk.DeleteTaskPushNotificationConfigParams) error) {
	fake.deleteTaskPushNotificationConfigMutex.Lock()
	defer fake.deleteTaskPushNotificationConfigMutex.Unlock()
	fake.DeleteTaskPushNotificationConfigStub = stub
}

func (fake *FakeTaskManager) DeleteTaskPushNotificationConfigArgsForCall(i int) adk.DeleteTaskPushNotificationConfigParams {
	fake.deleteTaskPushNotificationConfigMutex.RLock()
	defer fake.deleteTaskPushNotificationConfigMutex.RUnlock()
	argsForCall := fake.deleteTaskPushNotificationConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) DeleteTaskPushNotificationConfigReturns(result1 error) {
	fake.deleteTaskPushNotificationConfigMutex.Lock()
	defer fake.deleteTaskPushNotificationConfigMutex.Unlock()
	fake.DeleteTaskPushNotificationConfigStub = nil
	fake.deleteTaskPushNotificationConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskManager) DeleteTaskPushNotificationConfigReturnsOnCall(i int, result1 error) {
	fake.deleteTaskPushNotificationConfigMutex.Lock()
	defer fake.deleteTaskPushNotificationConfigMutex.Unlock()
	fake.DeleteTaskPushNotificationConfigStub = nil
	if fake.deleteTaskPushNotificationConfigReturnsOnCall == nil {
		fake.deleteTaskPushNotificationConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteTaskPushNotificationConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskManager) GetConversationHistory(arg1 string) []adk.Message {
	fake.getConversationHistoryMutex.Lock()
	ret, specificReturn := fake.getConversationHistoryReturnsOnCall[len(fake.getConversationHistoryArgsForCall)]
	fake.getConversationHistoryArgsForCall = append(fake.getConversationHistoryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetConversationHistoryStub
	fakeReturns := fake.getConversationHistoryReturns
	fake.recordInvocation("GetConversationHistory", []interface{}{arg1})
	fake.getConversationHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskManager) GetConversationHistoryCallCount() int {
	fake.getConversationHistoryMutex.RLock()
	defer fake.getConversationHistoryMutex.RUnlock()
	return len(fake.getConversationHistoryArgsForCall)
}

func (fake *FakeTaskManager) GetConversationHistoryCalls(stub func(string) []adk.Message) {
	fake.getConversationHistoryMutex.Lock()
	defer fake.getConversationHistoryMutex.Unlock()
	fake.GetConversationHistoryStub = stub
}

func (fake *FakeTaskManager) GetConversationHistoryArgsForCall(i int) string {
	fake.getConversationHistoryMutex.RLock()
	defer fake.getConversationHistoryMutex.RUnlock()
	argsForCall := fake.getConversationHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) GetConversationHistoryReturns(result1 []adk.Message) {
	fake.getConversationHistoryMutex.Lock()
	defer fake.getConversationHistoryMutex.Unlock()
	fake.GetConversationHistoryStub = nil
	fake.getConversationHistoryReturns = struct {
		result1 []adk.Message
	}{result1}
}

func (fake *FakeTaskManager) GetConversationHistoryReturnsOnCall(i int, result1 []adk.Message) {
	fake.getConversationHistoryMutex.Lock()
	defer fake.getConversationHistoryMutex.Unlock()
	fake.GetConversationHistoryStub = nil
	if fake.getConversationHistoryReturnsOnCall == nil {
		fake.getConversationHistoryReturnsOnCall = make(map[int]struct {
			result1 []adk.Message
		})
	}
	fake.getConversationHistoryReturnsOnCall[i] = struct {
		result1 []adk.Message
	}{result1}
}

func (fake *FakeTaskManager) GetTask(arg1 string) (*adk.Task, bool) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetTaskStub
	fakeReturns := fake.getTaskReturns
	fake.recordInvocation("GetTask", []interface{}{arg1})
	fake.getTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskManager) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeTaskManager) GetTaskCalls(stub func(string) (*adk.Task, bool)) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = stub
}

func (fake *FakeTaskManager) GetTaskArgsForCall(i int) string {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	argsForCall := fake.getTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) GetTaskReturns(result1 *adk.Task, result2 bool) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 *adk.Task
		result2 bool
	}{result1, result2}
}

func (fake *FakeTaskManager) GetTaskReturnsOnCall(i int, result1 *adk.Task, result2 bool) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 *adk.Task
			result2 bool
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 *adk.Task
		result2 bool
	}{result1, result2}
}

func (fake *FakeTaskManager) GetTaskPushNotificationConfig(arg1 adk.GetTaskPushNotificationConfigParams) (*adk.TaskPushNotificationConfig, error) {
	fake.getTaskPushNotificationConfigMutex.Lock()
	ret, specificReturn := fake.getTaskPushNotificationConfigReturnsOnCall[len(fake.getTaskPushNotificationConfigArgsForCall)]
	fake.getTaskPushNotificationConfigArgsForCall = append(fake.getTaskPushNotificationConfigArgsForCall, struct {
		arg1 adk.GetTaskPushNotificationConfigParams
	}{arg1})
	stub := fake.GetTaskPushNotificationConfigStub
	fakeReturns := fake.getTaskPushNotificationConfigReturns
	fake.recordInvocation("GetTaskPushNotificationConfig", []interface{}{arg1})
	fake.getTaskPushNotificationConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskManager) GetTaskPushNotificationConfigCallCount() int {
	fake.getTaskPushNotificationConfigMutex.RLock()
	defer fake.getTaskPushNotificationConfigMutex.RUnlock()
	return len(fake.getTaskPushNotificationConfigArgsForCall)
}

func (fake *FakeTaskManager) GetTaskPushNotificationConfigCalls(stub func(adk.GetTaskPushNotificationConfigParams) (*adk.TaskPushNotificationConfig, error)) {
	fake.getTaskPushNotificationConfigMutex.Lock()
	defer fake.getTaskPushNotificationConfigMutex.Unlock()
	fake.GetTaskPushNotificationConfigStub = stub
}

func (fake *FakeTaskManager) GetTaskPushNotificationConfigArgsForCall(i int) adk.GetTaskPushNotificationConfigParams {
	fake.getTaskPushNotificationConfigMutex.RLock()
	defer fake.getTaskPushNotificationConfigMutex.RUnlock()
	argsForCall := fake.getTaskPushNotificationConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) GetTaskPushNotificationConfigReturns(result1 *adk.TaskPushNotificationConfig, result2 error) {
	fake.getTaskPushNotificationConfigMutex.Lock()
	defer fake.getTaskPushNotificationConfigMutex.Unlock()
	fake.GetTaskPushNotificationConfigStub = nil
	fake.getTaskPushNotificationConfigReturns = struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) GetTaskPushNotificationConfigReturnsOnCall(i int, result1 *adk.TaskPushNotificationConfig, result2 error) {
	fake.getTaskPushNotificationConfigMutex.Lock()
	defer fake.getTaskPushNotificationConfigMutex.Unlock()
	fake.GetTaskPushNotificationConfigStub = nil
	if fake.getTaskPushNotificationConfigReturnsOnCall == nil {
		fake.getTaskPushNotificationConfigReturnsOnCall = make(map[int]struct {
			result1 *adk.TaskPushNotificationConfig
			result2 error
		})
	}
	fake.getTaskPushNotificationConfigReturnsOnCall[i] = struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) ListTaskPushNotificationConfigs(arg1 adk.ListTaskPushNotificationConfigParams) ([]adk.TaskPushNotificationConfig, error) {
	fake.listTaskPushNotificationConfigsMutex.Lock()
	ret, specificReturn := fake.listTaskPushNotificationConfigsReturnsOnCall[len(fake.listTaskPushNotificationConfigsArgsForCall)]
	fake.listTaskPushNotificationConfigsArgsForCall = append(fake.listTaskPushNotificationConfigsArgsForCall, struct {
		arg1 adk.ListTaskPushNotificationConfigParams
	}{arg1})
	stub := fake.ListTaskPushNotificationConfigsStub
	fakeReturns := fake.listTaskPushNotificationConfigsReturns
	fake.recordInvocation("ListTaskPushNotificationConfigs", []interface{}{arg1})
	fake.listTaskPushNotificationConfigsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskManager) ListTaskPushNotificationConfigsCallCount() int {
	fake.listTaskPushNotificationConfigsMutex.RLock()
	defer fake.listTaskPushNotificationConfigsMutex.RUnlock()
	return len(fake.listTaskPushNotificationConfigsArgsForCall)
}

func (fake *FakeTaskManager) ListTaskPushNotificationConfigsCalls(stub func(adk.ListTaskPushNotificationConfigParams) ([]adk.TaskPushNotificationConfig, error)) {
	fake.listTaskPushNotificationConfigsMutex.Lock()
	defer fake.listTaskPushNotificationConfigsMutex.Unlock()
	fake.ListTaskPushNotificationConfigsStub = stub
}

func (fake *FakeTaskManager) ListTaskPushNotificationConfigsArgsForCall(i int) adk.ListTaskPushNotificationConfigParams {
	fake.listTaskPushNotificationConfigsMutex.RLock()
	defer fake.listTaskPushNotificationConfigsMutex.RUnlock()
	argsForCall := fake.listTaskPushNotificationConfigsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) ListTaskPushNotificationConfigsReturns(result1 []adk.TaskPushNotificationConfig, result2 error) {
	fake.listTaskPushNotificationConfigsMutex.Lock()
	defer fake.listTaskPushNotificationConfigsMutex.Unlock()
	fake.ListTaskPushNotificationConfigsStub = nil
	fake.listTaskPushNotificationConfigsReturns = struct {
		result1 []adk.TaskPushNotificationConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) ListTaskPushNotificationConfigsReturnsOnCall(i int, result1 []adk.TaskPushNotificationConfig, result2 error) {
	fake.listTaskPushNotificationConfigsMutex.Lock()
	defer fake.listTaskPushNotificationConfigsMutex.Unlock()
	fake.ListTaskPushNotificationConfigsStub = nil
	if fake.listTaskPushNotificationConfigsReturnsOnCall == nil {
		fake.listTaskPushNotificationConfigsReturnsOnCall = make(map[int]struct {
			result1 []adk.TaskPushNotificationConfig
			result2 error
		})
	}
	fake.listTaskPushNotificationConfigsReturnsOnCall[i] = struct {
		result1 []adk.TaskPushNotificationConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) ListTasks(arg1 adk.TaskListParams) (*adk.TaskList, error) {
	fake.listTasksMutex.Lock()
	ret, specificReturn := fake.listTasksReturnsOnCall[len(fake.listTasksArgsForCall)]
	fake.listTasksArgsForCall = append(fake.listTasksArgsForCall, struct {
		arg1 adk.TaskListParams
	}{arg1})
	stub := fake.ListTasksStub
	fakeReturns := fake.listTasksReturns
	fake.recordInvocation("ListTasks", []interface{}{arg1})
	fake.listTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskManager) ListTasksCallCount() int {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	return len(fake.listTasksArgsForCall)
}

func (fake *FakeTaskManager) ListTasksCalls(stub func(adk.TaskListParams) (*adk.TaskList, error)) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = stub
}

func (fake *FakeTaskManager) ListTasksArgsForCall(i int) adk.TaskListParams {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	argsForCall := fake.listTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) ListTasksReturns(result1 *adk.TaskList, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	fake.listTasksReturns = struct {
		result1 *adk.TaskList
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) ListTasksReturnsOnCall(i int, result1 *adk.TaskList, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	if fake.listTasksReturnsOnCall == nil {
		fake.listTasksReturnsOnCall = make(map[int]struct {
			result1 *adk.TaskList
			result2 error
		})
	}
	fake.listTasksReturnsOnCall[i] = struct {
		result1 *adk.TaskList
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) PollTaskStatus(arg1 string, arg2 time.Duration, arg3 time.Duration) (*adk.Task, error) {
	fake.pollTaskStatusMutex.Lock()
	ret, specificReturn := fake.pollTaskStatusReturnsOnCall[len(fake.pollTaskStatusArgsForCall)]
	fake.pollTaskStatusArgsForCall = append(fake.pollTaskStatusArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.PollTaskStatusStub
	fakeReturns := fake.pollTaskStatusReturns
	fake.recordInvocation("PollTaskStatus", []interface{}{arg1, arg2, arg3})
	fake.pollTaskStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskManager) PollTaskStatusCallCount() int {
	fake.pollTaskStatusMutex.RLock()
	defer fake.pollTaskStatusMutex.RUnlock()
	return len(fake.pollTaskStatusArgsForCall)
}

func (fake *FakeTaskManager) PollTaskStatusCalls(stub func(string, time.Duration, time.Duration) (*adk.Task, error)) {
	fake.pollTaskStatusMutex.Lock()
	defer fake.pollTaskStatusMutex.Unlock()
	fake.PollTaskStatusStub = stub
}

func (fake *FakeTaskManager) PollTaskStatusArgsForCall(i int) (string, time.Duration, time.Duration) {
	fake.pollTaskStatusMutex.RLock()
	defer fake.pollTaskStatusMutex.RUnlock()
	argsForCall := fake.pollTaskStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskManager) PollTaskStatusReturns(result1 *adk.Task, result2 error) {
	fake.pollTaskStatusMutex.Lock()
	defer fake.pollTaskStatusMutex.Unlock()
	fake.PollTaskStatusStub = nil
	fake.pollTaskStatusReturns = struct {
		result1 *adk.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) PollTaskStatusReturnsOnCall(i int, result1 *adk.Task, result2 error) {
	fake.pollTaskStatusMutex.Lock()
	defer fake.pollTaskStatusMutex.Unlock()
	fake.PollTaskStatusStub = nil
	if fake.pollTaskStatusReturnsOnCall == nil {
		fake.pollTaskStatusReturnsOnCall = make(map[int]struct {
			result1 *adk.Task
			result2 error
		})
	}
	fake.pollTaskStatusReturnsOnCall[i] = struct {
		result1 *adk.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) SetTaskPushNotificationConfig(arg1 adk.TaskPushNotificationConfig) (*adk.TaskPushNotificationConfig, error) {
	fake.setTaskPushNotificationConfigMutex.Lock()
	ret, specificReturn := fake.setTaskPushNotificationConfigReturnsOnCall[len(fake.setTaskPushNotificationConfigArgsForCall)]
	fake.setTaskPushNotificationConfigArgsForCall = append(fake.setTaskPushNotificationConfigArgsForCall, struct {
		arg1 adk.TaskPushNotificationConfig
	}{arg1})
	stub := fake.SetTaskPushNotificationConfigStub
	fakeReturns := fake.setTaskPushNotificationConfigReturns
	fake.recordInvocation("SetTaskPushNotificationConfig", []interface{}{arg1})
	fake.setTaskPushNotificationConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskManager) SetTaskPushNotificationConfigCallCount() int {
	fake.setTaskPushNotificationConfigMutex.RLock()
	defer fake.setTaskPushNotificationConfigMutex.RUnlock()
	return len(fake.setTaskPushNotificationConfigArgsForCall)
}

func (fake *FakeTaskManager) SetTaskPushNotificationConfigCalls(stub func(adk.TaskPushNotificationConfig) (*adk.TaskPushNotificationConfig, error)) {
	fake.setTaskPushNotificationConfigMutex.Lock()
	defer fake.setTaskPushNotificationConfigMutex.Unlock()
	fake.SetTaskPushNotificationConfigStub = stub
}

func (fake *FakeTaskManager) SetTaskPushNotificationConfigArgsForCall(i int) adk.TaskPushNotificationConfig {
	fake.setTaskPushNotificationConfigMutex.RLock()
	defer fake.setTaskPushNotificationConfigMutex.RUnlock()
	argsForCall := fake.setTaskPushNotificationConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskManager) SetTaskPushNotificationConfigReturns(result1 *adk.TaskPushNotificationConfig, result2 error) {
	fake.setTaskPushNotificationConfigMutex.Lock()
	defer fake.setTaskPushNotificationConfigMutex.Unlock()
	fake.SetTaskPushNotificationConfigStub = nil
	fake.setTaskPushNotificationConfigReturns = struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) SetTaskPushNotificationConfigReturnsOnCall(i int, result1 *adk.TaskPushNotificationConfig, result2 error) {
	fake.setTaskPushNotificationConfigMutex.Lock()
	defer fake.setTaskPushNotificationConfigMutex.Unlock()
	fake.SetTaskPushNotificationConfigStub = nil
	if fake.setTaskPushNotificationConfigReturnsOnCall == nil {
		fake.setTaskPushNotificationConfigReturnsOnCall = make(map[int]struct {
			result1 *adk.TaskPushNotificationConfig
			result2 error
		})
	}
	fake.setTaskPushNotificationConfigReturnsOnCall[i] = struct {
		result1 *adk.TaskPushNotificationConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskManager) UpdateConversationHistory(arg1 string, arg2 []adk.Message) {
	var arg2Copy []adk.Message
	if arg2 != nil {
		arg2Copy = make([]adk.Message, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updateConversationHistoryMutex.Lock()
	fake.updateConversationHistoryArgsForCall = append(fake.updateConversationHistoryArgsForCall, struct {
		arg1 string
		arg2 []adk.Message
	}{arg1, arg2Copy})
	stub := fake.UpdateConversationHistoryStub
	fake.recordInvocation("UpdateConversationHistory", []interface{}{arg1, arg2Copy})
	fake.updateConversationHistoryMutex.Unlock()
	if stub != nil {
		fake.UpdateConversationHistoryStub(arg1, arg2)
	}
}

func (fake *FakeTaskManager) UpdateConversationHistoryCallCount() int {
	fake.updateConversationHistoryMutex.RLock()
	defer fake.updateConversationHistoryMutex.RUnlock()
	return len(fake.updateConversationHistoryArgsForCall)
}

func (fake *FakeTaskManager) UpdateConversationHistoryCalls(stub func(string, []adk.Message)) {
	fake.updateConversationHistoryMutex.Lock()
	defer fake.updateConversationHistoryMutex.Unlock()
	fake.UpdateConversationHistoryStub = stub
}

func (fake *FakeTaskManager) UpdateConversationHistoryArgsForCall(i int) (string, []adk.Message) {
	fake.updateConversationHistoryMutex.RLock()
	defer fake.updateConversationHistoryMutex.RUnlock()
	argsForCall := fake.updateConversationHistoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTaskManager) UpdateTask(arg1 string, arg2 adk.TaskState, arg3 *adk.Message) error {
	fake.updateTaskMutex.Lock()
	ret, specificReturn := fake.updateTaskReturnsOnCall[len(fake.updateTaskArgsForCall)]
	fake.updateTaskArgsForCall = append(fake.updateTaskArgsForCall, struct {
		arg1 string
		arg2 adk.TaskState
		arg3 *adk.Message
	}{arg1, arg2, arg3})
	stub := fake.UpdateTaskStub
	fakeReturns := fake.updateTaskReturns
	fake.recordInvocation("UpdateTask", []interface{}{arg1, arg2, arg3})
	fake.updateTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTaskManager) UpdateTaskCallCount() int {
	fake.updateTaskMutex.RLock()
	defer fake.updateTaskMutex.RUnlock()
	return len(fake.updateTaskArgsForCall)
}

func (fake *FakeTaskManager) UpdateTaskCalls(stub func(string, adk.TaskState, *adk.Message) error) {
	fake.updateTaskMutex.Lock()
	defer fake.updateTaskMutex.Unlock()
	fake.UpdateTaskStub = stub
}

func (fake *FakeTaskManager) UpdateTaskArgsForCall(i int) (string, adk.TaskState, *adk.Message) {
	fake.updateTaskMutex.RLock()
	defer fake.updateTaskMutex.RUnlock()
	argsForCall := fake.updateTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskManager) UpdateTaskReturns(result1 error) {
	fake.updateTaskMutex.Lock()
	defer fake.updateTaskMutex.Unlock()
	fake.UpdateTaskStub = nil
	fake.updateTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskManager) UpdateTaskReturnsOnCall(i int, result1 error) {
	fake.updateTaskMutex.Lock()
	defer fake.updateTaskMutex.Unlock()
	fake.UpdateTaskStub = nil
	if fake.updateTaskReturnsOnCall == nil {
		fake.updateTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	fake.cleanupCompletedTasksMutex.RLock()
	defer fake.cleanupCompletedTasksMutex.RUnlock()
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	fake.deleteTaskPushNotificationConfigMutex.RLock()
	defer fake.deleteTaskPushNotificationConfigMutex.RUnlock()
	fake.getConversationHistoryMutex.RLock()
	defer fake.getConversationHistoryMutex.RUnlock()
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	fake.getTaskPushNotificationConfigMutex.RLock()
	defer fake.getTaskPushNotificationConfigMutex.RUnlock()
	fake.listTaskPushNotificationConfigsMutex.RLock()
	defer fake.listTaskPushNotificationConfigsMutex.RUnlock()
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	fake.pollTaskStatusMutex.RLock()
	defer fake.pollTaskStatusMutex.RUnlock()
	fake.setTaskPushNotificationConfigMutex.RLock()
	defer fake.setTaskPushNotificationConfigMutex.RUnlock()
	fake.updateConversationHistoryMutex.RLock()
	defer fake.updateConversationHistoryMutex.RUnlock()
	fake.updateTaskMutex.RLock()
	defer fake.updateTaskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.TaskManager = new(FakeTaskManager)
