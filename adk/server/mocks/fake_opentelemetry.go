// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/a2a/adk/server/config"
	"github.com/inference-gateway/a2a/adk/server/otel"
	"github.com/inference-gateway/sdk"
	"go.uber.org/zap"
)

type FakeOpenTelemetry struct {
	InitStub        func(*config.Config, zap.Logger) error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		arg1 *config.Config
		arg2 zap.Logger
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	RecordRequestCountStub        func(context.Context, otel.TelemetryAttributes, string)
	recordRequestCountMutex       sync.RWMutex
	recordRequestCountArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
	}
	RecordRequestDurationStub        func(context.Context, otel.TelemetryAttributes, string, string, float64)
	recordRequestDurationMutex       sync.RWMutex
	recordRequestDurationArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
		arg5 float64
	}
	RecordResponseStatusStub        func(context.Context, otel.TelemetryAttributes, string, string, int)
	recordResponseStatusMutex       sync.RWMutex
	recordResponseStatusArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
		arg5 int
	}
	RecordTaskCompletedStub        func(context.Context, otel.TelemetryAttributes, bool)
	recordTaskCompletedMutex       sync.RWMutex
	recordTaskCompletedArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 bool
	}
	RecordTaskFailureStub        func(context.Context, otel.TelemetryAttributes, string, string)
	recordTaskFailureMutex       sync.RWMutex
	recordTaskFailureArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
	}
	RecordTaskQueuedStub        func(context.Context, otel.TelemetryAttributes)
	recordTaskQueuedMutex       sync.RWMutex
	recordTaskQueuedArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
	}
	RecordTokenUsageStub        func(context.Context, otel.TelemetryAttributes, sdk.CompletionUsage)
	recordTokenUsageMutex       sync.RWMutex
	recordTokenUsageArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 sdk.CompletionUsage
	}
	RecordToolCallFailureStub        func(context.Context, otel.TelemetryAttributes, string, string)
	recordToolCallFailureMutex       sync.RWMutex
	recordToolCallFailureArgsForCall []struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
	}
	ShutDownStub        func(context.Context) error
	shutDownMutex       sync.RWMutex
	shutDownArgsForCall []struct {
		arg1 context.Context
	}
	shutDownReturns struct {
		result1 error
	}
	shutDownReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOpenTelemetry) Init(arg1 *config.Config, arg2 zap.Logger) error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		arg1 *config.Config
		arg2 zap.Logger
	}{arg1, arg2})
	stub := fake.InitStub
	fakeReturns := fake.initReturns
	fake.recordInvocation("Init", []interface{}{arg1, arg2})
	fake.initMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOpenTelemetry) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeOpenTelemetry) InitCalls(stub func(*config.Config, zap.Logger) error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *FakeOpenTelemetry) InitArgsForCall(i int) (*config.Config, zap.Logger) {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	argsForCall := fake.initArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOpenTelemetry) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOpenTelemetry) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOpenTelemetry) RecordRequestCount(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 string) {
	fake.recordRequestCountMutex.Lock()
	fake.recordRequestCountArgsForCall = append(fake.recordRequestCountArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RecordRequestCountStub
	fake.recordInvocation("RecordRequestCount", []interface{}{arg1, arg2, arg3})
	fake.recordRequestCountMutex.Unlock()
	if stub != nil {
		fake.RecordRequestCountStub(arg1, arg2, arg3)
	}
}

func (fake *FakeOpenTelemetry) RecordRequestCountCallCount() int {
	fake.recordRequestCountMutex.RLock()
	defer fake.recordRequestCountMutex.RUnlock()
	return len(fake.recordRequestCountArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordRequestCountCalls(stub func(context.Context, otel.TelemetryAttributes, string)) {
	fake.recordRequestCountMutex.Lock()
	defer fake.recordRequestCountMutex.Unlock()
	fake.RecordRequestCountStub = stub
}

func (fake *FakeOpenTelemetry) RecordRequestCountArgsForCall(i int) (context.Context, otel.TelemetryAttributes, string) {
	fake.recordRequestCountMutex.RLock()
	defer fake.recordRequestCountMutex.RUnlock()
	argsForCall := fake.recordRequestCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOpenTelemetry) RecordRequestDuration(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 string, arg4 string, arg5 float64) {
	fake.recordRequestDurationMutex.Lock()
	fake.recordRequestDurationArgsForCall = append(fake.recordRequestDurationArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
		arg5 float64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.RecordRequestDurationStub
	fake.recordInvocation("RecordRequestDuration", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.recordRequestDurationMutex.Unlock()
	if stub != nil {
		fake.RecordRequestDurationStub(arg1, arg2, arg3, arg4, arg5)
	}
}

func (fake *FakeOpenTelemetry) RecordRequestDurationCallCount() int {
	fake.recordRequestDurationMutex.RLock()
	defer fake.recordRequestDurationMutex.RUnlock()
	return len(fake.recordRequestDurationArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordRequestDurationCalls(stub func(context.Context, otel.TelemetryAttributes, string, string, float64)) {
	fake.recordRequestDurationMutex.Lock()
	defer fake.recordRequestDurationMutex.Unlock()
	fake.RecordRequestDurationStub = stub
}

func (fake *FakeOpenTelemetry) RecordRequestDurationArgsForCall(i int) (context.Context, otel.TelemetryAttributes, string, string, float64) {
	fake.recordRequestDurationMutex.RLock()
	defer fake.recordRequestDurationMutex.RUnlock()
	argsForCall := fake.recordRequestDurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeOpenTelemetry) RecordResponseStatus(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 string, arg4 string, arg5 int) {
	fake.recordResponseStatusMutex.Lock()
	fake.recordResponseStatusArgsForCall = append(fake.recordResponseStatusArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
		arg5 int
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.RecordResponseStatusStub
	fake.recordInvocation("RecordResponseStatus", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.recordResponseStatusMutex.Unlock()
	if stub != nil {
		fake.RecordResponseStatusStub(arg1, arg2, arg3, arg4, arg5)
	}
}

func (fake *FakeOpenTelemetry) RecordResponseStatusCallCount() int {
	fake.recordResponseStatusMutex.RLock()
	defer fake.recordResponseStatusMutex.RUnlock()
	return len(fake.recordResponseStatusArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordResponseStatusCalls(stub func(context.Context, otel.TelemetryAttributes, string, string, int)) {
	fake.recordResponseStatusMutex.Lock()
	defer fake.recordResponseStatusMutex.Unlock()
	fake.RecordResponseStatusStub = stub
}

func (fake *FakeOpenTelemetry) RecordResponseStatusArgsForCall(i int) (context.Context, otel.TelemetryAttributes, string, string, int) {
	fake.recordResponseStatusMutex.RLock()
	defer fake.recordResponseStatusMutex.RUnlock()
	argsForCall := fake.recordResponseStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeOpenTelemetry) RecordTaskCompleted(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 bool) {
	fake.recordTaskCompletedMutex.Lock()
	fake.recordTaskCompletedArgsForCall = append(fake.recordTaskCompletedArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.RecordTaskCompletedStub
	fake.recordInvocation("RecordTaskCompleted", []interface{}{arg1, arg2, arg3})
	fake.recordTaskCompletedMutex.Unlock()
	if stub != nil {
		fake.RecordTaskCompletedStub(arg1, arg2, arg3)
	}
}

func (fake *FakeOpenTelemetry) RecordTaskCompletedCallCount() int {
	fake.recordTaskCompletedMutex.RLock()
	defer fake.recordTaskCompletedMutex.RUnlock()
	return len(fake.recordTaskCompletedArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordTaskCompletedCalls(stub func(context.Context, otel.TelemetryAttributes, bool)) {
	fake.recordTaskCompletedMutex.Lock()
	defer fake.recordTaskCompletedMutex.Unlock()
	fake.RecordTaskCompletedStub = stub
}

func (fake *FakeOpenTelemetry) RecordTaskCompletedArgsForCall(i int) (context.Context, otel.TelemetryAttributes, bool) {
	fake.recordTaskCompletedMutex.RLock()
	defer fake.recordTaskCompletedMutex.RUnlock()
	argsForCall := fake.recordTaskCompletedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOpenTelemetry) RecordTaskFailure(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 string, arg4 string) {
	fake.recordTaskFailureMutex.Lock()
	fake.recordTaskFailureArgsForCall = append(fake.recordTaskFailureArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.RecordTaskFailureStub
	fake.recordInvocation("RecordTaskFailure", []interface{}{arg1, arg2, arg3, arg4})
	fake.recordTaskFailureMutex.Unlock()
	if stub != nil {
		fake.RecordTaskFailureStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeOpenTelemetry) RecordTaskFailureCallCount() int {
	fake.recordTaskFailureMutex.RLock()
	defer fake.recordTaskFailureMutex.RUnlock()
	return len(fake.recordTaskFailureArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordTaskFailureCalls(stub func(context.Context, otel.TelemetryAttributes, string, string)) {
	fake.recordTaskFailureMutex.Lock()
	defer fake.recordTaskFailureMutex.Unlock()
	fake.RecordTaskFailureStub = stub
}

func (fake *FakeOpenTelemetry) RecordTaskFailureArgsForCall(i int) (context.Context, otel.TelemetryAttributes, string, string) {
	fake.recordTaskFailureMutex.RLock()
	defer fake.recordTaskFailureMutex.RUnlock()
	argsForCall := fake.recordTaskFailureArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeOpenTelemetry) RecordTaskQueued(arg1 context.Context, arg2 otel.TelemetryAttributes) {
	fake.recordTaskQueuedMutex.Lock()
	fake.recordTaskQueuedArgsForCall = append(fake.recordTaskQueuedArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
	}{arg1, arg2})
	stub := fake.RecordTaskQueuedStub
	fake.recordInvocation("RecordTaskQueued", []interface{}{arg1, arg2})
	fake.recordTaskQueuedMutex.Unlock()
	if stub != nil {
		fake.RecordTaskQueuedStub(arg1, arg2)
	}
}

func (fake *FakeOpenTelemetry) RecordTaskQueuedCallCount() int {
	fake.recordTaskQueuedMutex.RLock()
	defer fake.recordTaskQueuedMutex.RUnlock()
	return len(fake.recordTaskQueuedArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordTaskQueuedCalls(stub func(context.Context, otel.TelemetryAttributes)) {
	fake.recordTaskQueuedMutex.Lock()
	defer fake.recordTaskQueuedMutex.Unlock()
	fake.RecordTaskQueuedStub = stub
}

func (fake *FakeOpenTelemetry) RecordTaskQueuedArgsForCall(i int) (context.Context, otel.TelemetryAttributes) {
	fake.recordTaskQueuedMutex.RLock()
	defer fake.recordTaskQueuedMutex.RUnlock()
	argsForCall := fake.recordTaskQueuedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOpenTelemetry) RecordTokenUsage(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 sdk.CompletionUsage) {
	fake.recordTokenUsageMutex.Lock()
	fake.recordTokenUsageArgsForCall = append(fake.recordTokenUsageArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 sdk.CompletionUsage
	}{arg1, arg2, arg3})
	stub := fake.RecordTokenUsageStub
	fake.recordInvocation("RecordTokenUsage", []interface{}{arg1, arg2, arg3})
	fake.recordTokenUsageMutex.Unlock()
	if stub != nil {
		fake.RecordTokenUsageStub(arg1, arg2, arg3)
	}
}

func (fake *FakeOpenTelemetry) RecordTokenUsageCallCount() int {
	fake.recordTokenUsageMutex.RLock()
	defer fake.recordTokenUsageMutex.RUnlock()
	return len(fake.recordTokenUsageArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordTokenUsageCalls(stub func(context.Context, otel.TelemetryAttributes, sdk.CompletionUsage)) {
	fake.recordTokenUsageMutex.Lock()
	defer fake.recordTokenUsageMutex.Unlock()
	fake.RecordTokenUsageStub = stub
}

func (fake *FakeOpenTelemetry) RecordTokenUsageArgsForCall(i int) (context.Context, otel.TelemetryAttributes, sdk.CompletionUsage) {
	fake.recordTokenUsageMutex.RLock()
	defer fake.recordTokenUsageMutex.RUnlock()
	argsForCall := fake.recordTokenUsageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOpenTelemetry) RecordToolCallFailure(arg1 context.Context, arg2 otel.TelemetryAttributes, arg3 string, arg4 string) {
	fake.recordToolCallFailureMutex.Lock()
	fake.recordToolCallFailureArgsForCall = append(fake.recordToolCallFailureArgsForCall, struct {
		arg1 context.Context
		arg2 otel.TelemetryAttributes
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.RecordToolCallFailureStub
	fake.recordInvocation("RecordToolCallFailure", []interface{}{arg1, arg2, arg3, arg4})
	fake.recordToolCallFailureMutex.Unlock()
	if stub != nil {
		fake.RecordToolCallFailureStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeOpenTelemetry) RecordToolCallFailureCallCount() int {
	fake.recordToolCallFailureMutex.RLock()
	defer fake.recordToolCallFailureMutex.RUnlock()
	return len(fake.recordToolCallFailureArgsForCall)
}

func (fake *FakeOpenTelemetry) RecordToolCallFailureCalls(stub func(context.Context, otel.TelemetryAttributes, string, string)) {
	fake.recordToolCallFailureMutex.Lock()
	defer fake.recordToolCallFailureMutex.Unlock()
	fake.RecordToolCallFailureStub = stub
}

func (fake *FakeOpenTelemetry) RecordToolCallFailureArgsForCall(i int) (context.Context, otel.TelemetryAttributes, string, string) {
	fake.recordToolCallFailureMutex.RLock()
	defer fake.recordToolCallFailureMutex.RUnlock()
	argsForCall := fake.recordToolCallFailureArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeOpenTelemetry) ShutDown(arg1 context.Context) error {
	fake.shutDownMutex.Lock()
	ret, specificReturn := fake.shutDownReturnsOnCall[len(fake.shutDownArgsForCall)]
	fake.shutDownArgsForCall = append(fake.shutDownArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ShutDownStub
	fakeReturns := fake.shutDownReturns
	fake.recordInvocation("ShutDown", []interface{}{arg1})
	fake.shutDownMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOpenTelemetry) ShutDownCallCount() int {
	fake.shutDownMutex.RLock()
	defer fake.shutDownMutex.RUnlock()
	return len(fake.shutDownArgsForCall)
}

func (fake *FakeOpenTelemetry) ShutDownCalls(stub func(context.Context) error) {
	fake.shutDownMutex.Lock()
	defer fake.shutDownMutex.Unlock()
	fake.ShutDownStub = stub
}

func (fake *FakeOpenTelemetry) ShutDownArgsForCall(i int) context.Context {
	fake.shutDownMutex.RLock()
	defer fake.shutDownMutex.RUnlock()
	argsForCall := fake.shutDownArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOpenTelemetry) ShutDownReturns(result1 error) {
	fake.shutDownMutex.Lock()
	defer fake.shutDownMutex.Unlock()
	fake.ShutDownStub = nil
	fake.shutDownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOpenTelemetry) ShutDownReturnsOnCall(i int, result1 error) {
	fake.shutDownMutex.Lock()
	defer fake.shutDownMutex.Unlock()
	fake.ShutDownStub = nil
	if fake.shutDownReturnsOnCall == nil {
		fake.shutDownReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.shutDownReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOpenTelemetry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.recordRequestCountMutex.RLock()
	defer fake.recordRequestCountMutex.RUnlock()
	fake.recordRequestDurationMutex.RLock()
	defer fake.recordRequestDurationMutex.RUnlock()
	fake.recordResponseStatusMutex.RLock()
	defer fake.recordResponseStatusMutex.RUnlock()
	fake.recordTaskCompletedMutex.RLock()
	defer fake.recordTaskCompletedMutex.RUnlock()
	fake.recordTaskFailureMutex.RLock()
	defer fake.recordTaskFailureMutex.RUnlock()
	fake.recordTaskQueuedMutex.RLock()
	defer fake.recordTaskQueuedMutex.RUnlock()
	fake.recordTokenUsageMutex.RLock()
	defer fake.recordTokenUsageMutex.RUnlock()
	fake.recordToolCallFailureMutex.RLock()
	defer fake.recordToolCallFailureMutex.RUnlock()
	fake.shutDownMutex.RLock()
	defer fake.shutDownMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOpenTelemetry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ otel.OpenTelemetry = new(FakeOpenTelemetry)
