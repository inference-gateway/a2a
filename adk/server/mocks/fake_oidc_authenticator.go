// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeOIDCAuthenticator struct {
	MiddlewareStub        func() gin.HandlerFunc
	middlewareMutex       sync.RWMutex
	middlewareArgsForCall []struct {
	}
	middlewareReturns struct {
		result1 gin.HandlerFunc
	}
	middlewareReturnsOnCall map[int]struct {
		result1 gin.HandlerFunc
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOIDCAuthenticator) Middleware() gin.HandlerFunc {
	fake.middlewareMutex.Lock()
	ret, specificReturn := fake.middlewareReturnsOnCall[len(fake.middlewareArgsForCall)]
	fake.middlewareArgsForCall = append(fake.middlewareArgsForCall, struct {
	}{})
	stub := fake.MiddlewareStub
	fakeReturns := fake.middlewareReturns
	fake.recordInvocation("Middleware", []interface{}{})
	fake.middlewareMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOIDCAuthenticator) MiddlewareCallCount() int {
	fake.middlewareMutex.RLock()
	defer fake.middlewareMutex.RUnlock()
	return len(fake.middlewareArgsForCall)
}

func (fake *FakeOIDCAuthenticator) MiddlewareCalls(stub func() gin.HandlerFunc) {
	fake.middlewareMutex.Lock()
	defer fake.middlewareMutex.Unlock()
	fake.MiddlewareStub = stub
}

func (fake *FakeOIDCAuthenticator) MiddlewareReturns(result1 gin.HandlerFunc) {
	fake.middlewareMutex.Lock()
	defer fake.middlewareMutex.Unlock()
	fake.MiddlewareStub = nil
	fake.middlewareReturns = struct {
		result1 gin.HandlerFunc
	}{result1}
}

func (fake *FakeOIDCAuthenticator) MiddlewareReturnsOnCall(i int, result1 gin.HandlerFunc) {
	fake.middlewareMutex.Lock()
	defer fake.middlewareMutex.Unlock()
	fake.MiddlewareStub = nil
	if fake.middlewareReturnsOnCall == nil {
		fake.middlewareReturnsOnCall = make(map[int]struct {
			result1 gin.HandlerFunc
		})
	}
	fake.middlewareReturnsOnCall[i] = struct {
		result1 gin.HandlerFunc
	}{result1}
}

func (fake *FakeOIDCAuthenticator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.middlewareMutex.RLock()
	defer fake.middlewareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOIDCAuthenticator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.OIDCAuthenticator = new(FakeOIDCAuthenticator)
