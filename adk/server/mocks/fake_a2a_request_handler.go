// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/inference-gateway/a2a/adk"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeA2ARequestHandler struct {
	HandleA2ARequestStub        func(*gin.Context)
	handleA2ARequestMutex       sync.RWMutex
	handleA2ARequestArgsForCall []struct {
		arg1 *gin.Context
	}
	HandleTaskCancelStub        func(*gin.Context, adk.JSONRPCRequest)
	handleTaskCancelMutex       sync.RWMutex
	handleTaskCancelArgsForCall []struct {
		arg1 *gin.Context
		arg2 adk.JSONRPCRequest
	}
	HandleTaskGetStub        func(*gin.Context, adk.JSONRPCRequest)
	handleTaskGetMutex       sync.RWMutex
	handleTaskGetArgsForCall []struct {
		arg1 *gin.Context
		arg2 adk.JSONRPCRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeA2ARequestHandler) HandleA2ARequest(arg1 *gin.Context) {
	fake.handleA2ARequestMutex.Lock()
	fake.handleA2ARequestArgsForCall = append(fake.handleA2ARequestArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.HandleA2ARequestStub
	fake.recordInvocation("HandleA2ARequest", []interface{}{arg1})
	fake.handleA2ARequestMutex.Unlock()
	if stub != nil {
		fake.HandleA2ARequestStub(arg1)
	}
}

func (fake *FakeA2ARequestHandler) HandleA2ARequestCallCount() int {
	fake.handleA2ARequestMutex.RLock()
	defer fake.handleA2ARequestMutex.RUnlock()
	return len(fake.handleA2ARequestArgsForCall)
}

func (fake *FakeA2ARequestHandler) HandleA2ARequestCalls(stub func(*gin.Context)) {
	fake.handleA2ARequestMutex.Lock()
	defer fake.handleA2ARequestMutex.Unlock()
	fake.HandleA2ARequestStub = stub
}

func (fake *FakeA2ARequestHandler) HandleA2ARequestArgsForCall(i int) *gin.Context {
	fake.handleA2ARequestMutex.RLock()
	defer fake.handleA2ARequestMutex.RUnlock()
	argsForCall := fake.handleA2ARequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2ARequestHandler) HandleTaskCancel(arg1 *gin.Context, arg2 adk.JSONRPCRequest) {
	fake.handleTaskCancelMutex.Lock()
	fake.handleTaskCancelArgsForCall = append(fake.handleTaskCancelArgsForCall, struct {
		arg1 *gin.Context
		arg2 adk.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskCancelStub
	fake.recordInvocation("HandleTaskCancel", []interface{}{arg1, arg2})
	fake.handleTaskCancelMutex.Unlock()
	if stub != nil {
		fake.HandleTaskCancelStub(arg1, arg2)
	}
}

func (fake *FakeA2ARequestHandler) HandleTaskCancelCallCount() int {
	fake.handleTaskCancelMutex.RLock()
	defer fake.handleTaskCancelMutex.RUnlock()
	return len(fake.handleTaskCancelArgsForCall)
}

func (fake *FakeA2ARequestHandler) HandleTaskCancelCalls(stub func(*gin.Context, adk.JSONRPCRequest)) {
	fake.handleTaskCancelMutex.Lock()
	defer fake.handleTaskCancelMutex.Unlock()
	fake.HandleTaskCancelStub = stub
}

func (fake *FakeA2ARequestHandler) HandleTaskCancelArgsForCall(i int) (*gin.Context, adk.JSONRPCRequest) {
	fake.handleTaskCancelMutex.RLock()
	defer fake.handleTaskCancelMutex.RUnlock()
	argsForCall := fake.handleTaskCancelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2ARequestHandler) HandleTaskGet(arg1 *gin.Context, arg2 adk.JSONRPCRequest) {
	fake.handleTaskGetMutex.Lock()
	fake.handleTaskGetArgsForCall = append(fake.handleTaskGetArgsForCall, struct {
		arg1 *gin.Context
		arg2 adk.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskGetStub
	fake.recordInvocation("HandleTaskGet", []interface{}{arg1, arg2})
	fake.handleTaskGetMutex.Unlock()
	if stub != nil {
		fake.HandleTaskGetStub(arg1, arg2)
	}
}

func (fake *FakeA2ARequestHandler) HandleTaskGetCallCount() int {
	fake.handleTaskGetMutex.RLock()
	defer fake.handleTaskGetMutex.RUnlock()
	return len(fake.handleTaskGetArgsForCall)
}

func (fake *FakeA2ARequestHandler) HandleTaskGetCalls(stub func(*gin.Context, adk.JSONRPCRequest)) {
	fake.handleTaskGetMutex.Lock()
	defer fake.handleTaskGetMutex.Unlock()
	fake.HandleTaskGetStub = stub
}

func (fake *FakeA2ARequestHandler) HandleTaskGetArgsForCall(i int) (*gin.Context, adk.JSONRPCRequest) {
	fake.handleTaskGetMutex.RLock()
	defer fake.handleTaskGetMutex.RUnlock()
	argsForCall := fake.handleTaskGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2ARequestHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleA2ARequestMutex.RLock()
	defer fake.handleA2ARequestMutex.RUnlock()
	fake.handleTaskCancelMutex.RLock()
	defer fake.handleTaskCancelMutex.RUnlock()
	fake.handleTaskGetMutex.RLock()
	defer fake.handleTaskGetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeA2ARequestHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.A2ARequestHandler = new(FakeA2ARequestHandler)
