// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/a2a/adk"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeA2AServer struct {
	GetAgentStub        func() server.OpenAICompatibleAgent
	getAgentMutex       sync.RWMutex
	getAgentArgsForCall []struct {
	}
	getAgentReturns struct {
		result1 server.OpenAICompatibleAgent
	}
	getAgentReturnsOnCall map[int]struct {
		result1 server.OpenAICompatibleAgent
	}
	GetAgentCardStub        func() adk.AgentCard
	getAgentCardMutex       sync.RWMutex
	getAgentCardArgsForCall []struct {
	}
	getAgentCardReturns struct {
		result1 adk.AgentCard
	}
	getAgentCardReturnsOnCall map[int]struct {
		result1 adk.AgentCard
	}
	GetLLMClientStub        func() server.LLMClient
	getLLMClientMutex       sync.RWMutex
	getLLMClientArgsForCall []struct {
	}
	getLLMClientReturns struct {
		result1 server.LLMClient
	}
	getLLMClientReturnsOnCall map[int]struct {
		result1 server.LLMClient
	}
	GetTaskHandlerStub        func() server.TaskHandler
	getTaskHandlerMutex       sync.RWMutex
	getTaskHandlerArgsForCall []struct {
	}
	getTaskHandlerReturns struct {
		result1 server.TaskHandler
	}
	getTaskHandlerReturnsOnCall map[int]struct {
		result1 server.TaskHandler
	}
	ProcessTaskStub        func(context.Context, *adk.Task, *adk.Message) (*adk.Task, error)
	processTaskMutex       sync.RWMutex
	processTaskArgsForCall []struct {
		arg1 context.Context
		arg2 *adk.Task
		arg3 *adk.Message
	}
	processTaskReturns struct {
		result1 *adk.Task
		result2 error
	}
	processTaskReturnsOnCall map[int]struct {
		result1 *adk.Task
		result2 error
	}
	SetAgentStub        func(server.OpenAICompatibleAgent)
	setAgentMutex       sync.RWMutex
	setAgentArgsForCall []struct {
		arg1 server.OpenAICompatibleAgent
	}
	SetAgentDescriptionStub        func(string)
	setAgentDescriptionMutex       sync.RWMutex
	setAgentDescriptionArgsForCall []struct {
		arg1 string
	}
	SetAgentNameStub        func(string)
	setAgentNameMutex       sync.RWMutex
	setAgentNameArgsForCall []struct {
		arg1 string
	}
	SetAgentURLStub        func(string)
	setAgentURLMutex       sync.RWMutex
	setAgentURLArgsForCall []struct {
		arg1 string
	}
	SetAgentVersionStub        func(string)
	setAgentVersionMutex       sync.RWMutex
	setAgentVersionArgsForCall []struct {
		arg1 string
	}
	SetLLMClientStub        func(server.LLMClient)
	setLLMClientMutex       sync.RWMutex
	setLLMClientArgsForCall []struct {
		arg1 server.LLMClient
	}
	SetTaskHandlerStub        func(server.TaskHandler)
	setTaskHandlerMutex       sync.RWMutex
	setTaskHandlerArgsForCall []struct {
		arg1 server.TaskHandler
	}
	StartStub        func(context.Context) error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 context.Context
	}
	startReturns struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	StartTaskProcessorStub        func(context.Context)
	startTaskProcessorMutex       sync.RWMutex
	startTaskProcessorArgsForCall []struct {
		arg1 context.Context
	}
	StopStub        func(context.Context) error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		arg1 context.Context
	}
	stopReturns struct {
		result1 error
	}
	stopReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeA2AServer) GetAgent() server.OpenAICompatibleAgent {
	fake.getAgentMutex.Lock()
	ret, specificReturn := fake.getAgentReturnsOnCall[len(fake.getAgentArgsForCall)]
	fake.getAgentArgsForCall = append(fake.getAgentArgsForCall, struct {
	}{})
	stub := fake.GetAgentStub
	fakeReturns := fake.getAgentReturns
	fake.recordInvocation("GetAgent", []interface{}{})
	fake.getAgentMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetAgentCallCount() int {
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	return len(fake.getAgentArgsForCall)
}

func (fake *FakeA2AServer) GetAgentCalls(stub func() server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = stub
}

func (fake *FakeA2AServer) GetAgentReturns(result1 server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	fake.getAgentReturns = struct {
		result1 server.OpenAICompatibleAgent
	}{result1}
}

func (fake *FakeA2AServer) GetAgentReturnsOnCall(i int, result1 server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	if fake.getAgentReturnsOnCall == nil {
		fake.getAgentReturnsOnCall = make(map[int]struct {
			result1 server.OpenAICompatibleAgent
		})
	}
	fake.getAgentReturnsOnCall[i] = struct {
		result1 server.OpenAICompatibleAgent
	}{result1}
}

func (fake *FakeA2AServer) GetAgentCard() adk.AgentCard {
	fake.getAgentCardMutex.Lock()
	ret, specificReturn := fake.getAgentCardReturnsOnCall[len(fake.getAgentCardArgsForCall)]
	fake.getAgentCardArgsForCall = append(fake.getAgentCardArgsForCall, struct {
	}{})
	stub := fake.GetAgentCardStub
	fakeReturns := fake.getAgentCardReturns
	fake.recordInvocation("GetAgentCard", []interface{}{})
	fake.getAgentCardMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetAgentCardCallCount() int {
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	return len(fake.getAgentCardArgsForCall)
}

func (fake *FakeA2AServer) GetAgentCardCalls(stub func() adk.AgentCard) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = stub
}

func (fake *FakeA2AServer) GetAgentCardReturns(result1 adk.AgentCard) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = nil
	fake.getAgentCardReturns = struct {
		result1 adk.AgentCard
	}{result1}
}

func (fake *FakeA2AServer) GetAgentCardReturnsOnCall(i int, result1 adk.AgentCard) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = nil
	if fake.getAgentCardReturnsOnCall == nil {
		fake.getAgentCardReturnsOnCall = make(map[int]struct {
			result1 adk.AgentCard
		})
	}
	fake.getAgentCardReturnsOnCall[i] = struct {
		result1 adk.AgentCard
	}{result1}
}

func (fake *FakeA2AServer) GetLLMClient() server.LLMClient {
	fake.getLLMClientMutex.Lock()
	ret, specificReturn := fake.getLLMClientReturnsOnCall[len(fake.getLLMClientArgsForCall)]
	fake.getLLMClientArgsForCall = append(fake.getLLMClientArgsForCall, struct {
	}{})
	stub := fake.GetLLMClientStub
	fakeReturns := fake.getLLMClientReturns
	fake.recordInvocation("GetLLMClient", []interface{}{})
	fake.getLLMClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetLLMClientCallCount() int {
	fake.getLLMClientMutex.RLock()
	defer fake.getLLMClientMutex.RUnlock()
	return len(fake.getLLMClientArgsForCall)
}

func (fake *FakeA2AServer) GetLLMClientCalls(stub func() server.LLMClient) {
	fake.getLLMClientMutex.Lock()
	defer fake.getLLMClientMutex.Unlock()
	fake.GetLLMClientStub = stub
}

func (fake *FakeA2AServer) GetLLMClientReturns(result1 server.LLMClient) {
	fake.getLLMClientMutex.Lock()
	defer fake.getLLMClientMutex.Unlock()
	fake.GetLLMClientStub = nil
	fake.getLLMClientReturns = struct {
		result1 server.LLMClient
	}{result1}
}

func (fake *FakeA2AServer) GetLLMClientReturnsOnCall(i int, result1 server.LLMClient) {
	fake.getLLMClientMutex.Lock()
	defer fake.getLLMClientMutex.Unlock()
	fake.GetLLMClientStub = nil
	if fake.getLLMClientReturnsOnCall == nil {
		fake.getLLMClientReturnsOnCall = make(map[int]struct {
			result1 server.LLMClient
		})
	}
	fake.getLLMClientReturnsOnCall[i] = struct {
		result1 server.LLMClient
	}{result1}
}

func (fake *FakeA2AServer) GetTaskHandler() server.TaskHandler {
	fake.getTaskHandlerMutex.Lock()
	ret, specificReturn := fake.getTaskHandlerReturnsOnCall[len(fake.getTaskHandlerArgsForCall)]
	fake.getTaskHandlerArgsForCall = append(fake.getTaskHandlerArgsForCall, struct {
	}{})
	stub := fake.GetTaskHandlerStub
	fakeReturns := fake.getTaskHandlerReturns
	fake.recordInvocation("GetTaskHandler", []interface{}{})
	fake.getTaskHandlerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetTaskHandlerCallCount() int {
	fake.getTaskHandlerMutex.RLock()
	defer fake.getTaskHandlerMutex.RUnlock()
	return len(fake.getTaskHandlerArgsForCall)
}

func (fake *FakeA2AServer) GetTaskHandlerCalls(stub func() server.TaskHandler) {
	fake.getTaskHandlerMutex.Lock()
	defer fake.getTaskHandlerMutex.Unlock()
	fake.GetTaskHandlerStub = stub
}

func (fake *FakeA2AServer) GetTaskHandlerReturns(result1 server.TaskHandler) {
	fake.getTaskHandlerMutex.Lock()
	defer fake.getTaskHandlerMutex.Unlock()
	fake.GetTaskHandlerStub = nil
	fake.getTaskHandlerReturns = struct {
		result1 server.TaskHandler
	}{result1}
}

func (fake *FakeA2AServer) GetTaskHandlerReturnsOnCall(i int, result1 server.TaskHandler) {
	fake.getTaskHandlerMutex.Lock()
	defer fake.getTaskHandlerMutex.Unlock()
	fake.GetTaskHandlerStub = nil
	if fake.getTaskHandlerReturnsOnCall == nil {
		fake.getTaskHandlerReturnsOnCall = make(map[int]struct {
			result1 server.TaskHandler
		})
	}
	fake.getTaskHandlerReturnsOnCall[i] = struct {
		result1 server.TaskHandler
	}{result1}
}

func (fake *FakeA2AServer) ProcessTask(arg1 context.Context, arg2 *adk.Task, arg3 *adk.Message) (*adk.Task, error) {
	fake.processTaskMutex.Lock()
	ret, specificReturn := fake.processTaskReturnsOnCall[len(fake.processTaskArgsForCall)]
	fake.processTaskArgsForCall = append(fake.processTaskArgsForCall, struct {
		arg1 context.Context
		arg2 *adk.Task
		arg3 *adk.Message
	}{arg1, arg2, arg3})
	stub := fake.ProcessTaskStub
	fakeReturns := fake.processTaskReturns
	fake.recordInvocation("ProcessTask", []interface{}{arg1, arg2, arg3})
	fake.processTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AServer) ProcessTaskCallCount() int {
	fake.processTaskMutex.RLock()
	defer fake.processTaskMutex.RUnlock()
	return len(fake.processTaskArgsForCall)
}

func (fake *FakeA2AServer) ProcessTaskCalls(stub func(context.Context, *adk.Task, *adk.Message) (*adk.Task, error)) {
	fake.processTaskMutex.Lock()
	defer fake.processTaskMutex.Unlock()
	fake.ProcessTaskStub = stub
}

func (fake *FakeA2AServer) ProcessTaskArgsForCall(i int) (context.Context, *adk.Task, *adk.Message) {
	fake.processTaskMutex.RLock()
	defer fake.processTaskMutex.RUnlock()
	argsForCall := fake.processTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeA2AServer) ProcessTaskReturns(result1 *adk.Task, result2 error) {
	fake.processTaskMutex.Lock()
	defer fake.processTaskMutex.Unlock()
	fake.ProcessTaskStub = nil
	fake.processTaskReturns = struct {
		result1 *adk.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AServer) ProcessTaskReturnsOnCall(i int, result1 *adk.Task, result2 error) {
	fake.processTaskMutex.Lock()
	defer fake.processTaskMutex.Unlock()
	fake.ProcessTaskStub = nil
	if fake.processTaskReturnsOnCall == nil {
		fake.processTaskReturnsOnCall = make(map[int]struct {
			result1 *adk.Task
			result2 error
		})
	}
	fake.processTaskReturnsOnCall[i] = struct {
		result1 *adk.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AServer) SetAgent(arg1 server.OpenAICompatibleAgent) {
	fake.setAgentMutex.Lock()
	fake.setAgentArgsForCall = append(fake.setAgentArgsForCall, struct {
		arg1 server.OpenAICompatibleAgent
	}{arg1})
	stub := fake.SetAgentStub
	fake.recordInvocation("SetAgent", []interface{}{arg1})
	fake.setAgentMutex.Unlock()
	if stub != nil {
		fake.SetAgentStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentCallCount() int {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	return len(fake.setAgentArgsForCall)
}

func (fake *FakeA2AServer) SetAgentCalls(stub func(server.OpenAICompatibleAgent)) {
	fake.setAgentMutex.Lock()
	defer fake.setAgentMutex.Unlock()
	fake.SetAgentStub = stub
}

func (fake *FakeA2AServer) SetAgentArgsForCall(i int) server.OpenAICompatibleAgent {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	argsForCall := fake.setAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentDescription(arg1 string) {
	fake.setAgentDescriptionMutex.Lock()
	fake.setAgentDescriptionArgsForCall = append(fake.setAgentDescriptionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentDescriptionStub
	fake.recordInvocation("SetAgentDescription", []interface{}{arg1})
	fake.setAgentDescriptionMutex.Unlock()
	if stub != nil {
		fake.SetAgentDescriptionStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentDescriptionCallCount() int {
	fake.setAgentDescriptionMutex.RLock()
	defer fake.setAgentDescriptionMutex.RUnlock()
	return len(fake.setAgentDescriptionArgsForCall)
}

func (fake *FakeA2AServer) SetAgentDescriptionCalls(stub func(string)) {
	fake.setAgentDescriptionMutex.Lock()
	defer fake.setAgentDescriptionMutex.Unlock()
	fake.SetAgentDescriptionStub = stub
}

func (fake *FakeA2AServer) SetAgentDescriptionArgsForCall(i int) string {
	fake.setAgentDescriptionMutex.RLock()
	defer fake.setAgentDescriptionMutex.RUnlock()
	argsForCall := fake.setAgentDescriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentName(arg1 string) {
	fake.setAgentNameMutex.Lock()
	fake.setAgentNameArgsForCall = append(fake.setAgentNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentNameStub
	fake.recordInvocation("SetAgentName", []interface{}{arg1})
	fake.setAgentNameMutex.Unlock()
	if stub != nil {
		fake.SetAgentNameStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentNameCallCount() int {
	fake.setAgentNameMutex.RLock()
	defer fake.setAgentNameMutex.RUnlock()
	return len(fake.setAgentNameArgsForCall)
}

func (fake *FakeA2AServer) SetAgentNameCalls(stub func(string)) {
	fake.setAgentNameMutex.Lock()
	defer fake.setAgentNameMutex.Unlock()
	fake.SetAgentNameStub = stub
}

func (fake *FakeA2AServer) SetAgentNameArgsForCall(i int) string {
	fake.setAgentNameMutex.RLock()
	defer fake.setAgentNameMutex.RUnlock()
	argsForCall := fake.setAgentNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentURL(arg1 string) {
	fake.setAgentURLMutex.Lock()
	fake.setAgentURLArgsForCall = append(fake.setAgentURLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentURLStub
	fake.recordInvocation("SetAgentURL", []interface{}{arg1})
	fake.setAgentURLMutex.Unlock()
	if stub != nil {
		fake.SetAgentURLStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentURLCallCount() int {
	fake.setAgentURLMutex.RLock()
	defer fake.setAgentURLMutex.RUnlock()
	return len(fake.setAgentURLArgsForCall)
}

func (fake *FakeA2AServer) SetAgentURLCalls(stub func(string)) {
	fake.setAgentURLMutex.Lock()
	defer fake.setAgentURLMutex.Unlock()
	fake.SetAgentURLStub = stub
}

func (fake *FakeA2AServer) SetAgentURLArgsForCall(i int) string {
	fake.setAgentURLMutex.RLock()
	defer fake.setAgentURLMutex.RUnlock()
	argsForCall := fake.setAgentURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentVersion(arg1 string) {
	fake.setAgentVersionMutex.Lock()
	fake.setAgentVersionArgsForCall = append(fake.setAgentVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentVersionStub
	fake.recordInvocation("SetAgentVersion", []interface{}{arg1})
	fake.setAgentVersionMutex.Unlock()
	if stub != nil {
		fake.SetAgentVersionStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentVersionCallCount() int {
	fake.setAgentVersionMutex.RLock()
	defer fake.setAgentVersionMutex.RUnlock()
	return len(fake.setAgentVersionArgsForCall)
}

func (fake *FakeA2AServer) SetAgentVersionCalls(stub func(string)) {
	fake.setAgentVersionMutex.Lock()
	defer fake.setAgentVersionMutex.Unlock()
	fake.SetAgentVersionStub = stub
}

func (fake *FakeA2AServer) SetAgentVersionArgsForCall(i int) string {
	fake.setAgentVersionMutex.RLock()
	defer fake.setAgentVersionMutex.RUnlock()
	argsForCall := fake.setAgentVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetLLMClient(arg1 server.LLMClient) {
	fake.setLLMClientMutex.Lock()
	fake.setLLMClientArgsForCall = append(fake.setLLMClientArgsForCall, struct {
		arg1 server.LLMClient
	}{arg1})
	stub := fake.SetLLMClientStub
	fake.recordInvocation("SetLLMClient", []interface{}{arg1})
	fake.setLLMClientMutex.Unlock()
	if stub != nil {
		fake.SetLLMClientStub(arg1)
	}
}

func (fake *FakeA2AServer) SetLLMClientCallCount() int {
	fake.setLLMClientMutex.RLock()
	defer fake.setLLMClientMutex.RUnlock()
	return len(fake.setLLMClientArgsForCall)
}

func (fake *FakeA2AServer) SetLLMClientCalls(stub func(server.LLMClient)) {
	fake.setLLMClientMutex.Lock()
	defer fake.setLLMClientMutex.Unlock()
	fake.SetLLMClientStub = stub
}

func (fake *FakeA2AServer) SetLLMClientArgsForCall(i int) server.LLMClient {
	fake.setLLMClientMutex.RLock()
	defer fake.setLLMClientMutex.RUnlock()
	argsForCall := fake.setLLMClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetTaskHandler(arg1 server.TaskHandler) {
	fake.setTaskHandlerMutex.Lock()
	fake.setTaskHandlerArgsForCall = append(fake.setTaskHandlerArgsForCall, struct {
		arg1 server.TaskHandler
	}{arg1})
	stub := fake.SetTaskHandlerStub
	fake.recordInvocation("SetTaskHandler", []interface{}{arg1})
	fake.setTaskHandlerMutex.Unlock()
	if stub != nil {
		fake.SetTaskHandlerStub(arg1)
	}
}

func (fake *FakeA2AServer) SetTaskHandlerCallCount() int {
	fake.setTaskHandlerMutex.RLock()
	defer fake.setTaskHandlerMutex.RUnlock()
	return len(fake.setTaskHandlerArgsForCall)
}

func (fake *FakeA2AServer) SetTaskHandlerCalls(stub func(server.TaskHandler)) {
	fake.setTaskHandlerMutex.Lock()
	defer fake.setTaskHandlerMutex.Unlock()
	fake.SetTaskHandlerStub = stub
}

func (fake *FakeA2AServer) SetTaskHandlerArgsForCall(i int) server.TaskHandler {
	fake.setTaskHandlerMutex.RLock()
	defer fake.setTaskHandlerMutex.RUnlock()
	argsForCall := fake.setTaskHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) Start(arg1 context.Context) error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StartStub
	fakeReturns := fake.startReturns
	fake.recordInvocation("Start", []interface{}{arg1})
	fake.startMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeA2AServer) StartCalls(stub func(context.Context) error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeA2AServer) StartArgsForCall(i int) context.Context {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	argsForCall := fake.startArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) StartReturns(result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) StartReturnsOnCall(i int, result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) StartTaskProcessor(arg1 context.Context) {
	fake.startTaskProcessorMutex.Lock()
	fake.startTaskProcessorArgsForCall = append(fake.startTaskProcessorArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StartTaskProcessorStub
	fake.recordInvocation("StartTaskProcessor", []interface{}{arg1})
	fake.startTaskProcessorMutex.Unlock()
	if stub != nil {
		fake.StartTaskProcessorStub(arg1)
	}
}

func (fake *FakeA2AServer) StartTaskProcessorCallCount() int {
	fake.startTaskProcessorMutex.RLock()
	defer fake.startTaskProcessorMutex.RUnlock()
	return len(fake.startTaskProcessorArgsForCall)
}

func (fake *FakeA2AServer) StartTaskProcessorCalls(stub func(context.Context)) {
	fake.startTaskProcessorMutex.Lock()
	defer fake.startTaskProcessorMutex.Unlock()
	fake.StartTaskProcessorStub = stub
}

func (fake *FakeA2AServer) StartTaskProcessorArgsForCall(i int) context.Context {
	fake.startTaskProcessorMutex.RLock()
	defer fake.startTaskProcessorMutex.RUnlock()
	argsForCall := fake.startTaskProcessorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) Stop(arg1 context.Context) error {
	fake.stopMutex.Lock()
	ret, specificReturn := fake.stopReturnsOnCall[len(fake.stopArgsForCall)]
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StopStub
	fakeReturns := fake.stopReturns
	fake.recordInvocation("Stop", []interface{}{arg1})
	fake.stopMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeA2AServer) StopCalls(stub func(context.Context) error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeA2AServer) StopArgsForCall(i int) context.Context {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	argsForCall := fake.stopArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) StopReturns(result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) StopReturnsOnCall(i int, result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	if fake.stopReturnsOnCall == nil {
		fake.stopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	fake.getLLMClientMutex.RLock()
	defer fake.getLLMClientMutex.RUnlock()
	fake.getTaskHandlerMutex.RLock()
	defer fake.getTaskHandlerMutex.RUnlock()
	fake.processTaskMutex.RLock()
	defer fake.processTaskMutex.RUnlock()
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	fake.setAgentDescriptionMutex.RLock()
	defer fake.setAgentDescriptionMutex.RUnlock()
	fake.setAgentNameMutex.RLock()
	defer fake.setAgentNameMutex.RUnlock()
	fake.setAgentURLMutex.RLock()
	defer fake.setAgentURLMutex.RUnlock()
	fake.setAgentVersionMutex.RLock()
	defer fake.setAgentVersionMutex.RUnlock()
	fake.setLLMClientMutex.RLock()
	defer fake.setLLMClientMutex.RUnlock()
	fake.setTaskHandlerMutex.RLock()
	defer fake.setTaskHandlerMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.startTaskProcessorMutex.RLock()
	defer fake.startTaskProcessorMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeA2AServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.A2AServer = new(FakeA2AServer)
