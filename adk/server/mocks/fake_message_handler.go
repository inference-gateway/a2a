// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/a2a/adk"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeMessageHandler struct {
	HandleMessageSendStub        func(context.Context, adk.MessageSendParams) (*adk.Task, error)
	handleMessageSendMutex       sync.RWMutex
	handleMessageSendArgsForCall []struct {
		arg1 context.Context
		arg2 adk.MessageSendParams
	}
	handleMessageSendReturns struct {
		result1 *adk.Task
		result2 error
	}
	handleMessageSendReturnsOnCall map[int]struct {
		result1 *adk.Task
		result2 error
	}
	HandleMessageStreamStub        func(context.Context, adk.MessageSendParams) error
	handleMessageStreamMutex       sync.RWMutex
	handleMessageStreamArgsForCall []struct {
		arg1 context.Context
		arg2 adk.MessageSendParams
	}
	handleMessageStreamReturns struct {
		result1 error
	}
	handleMessageStreamReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessageHandler) HandleMessageSend(arg1 context.Context, arg2 adk.MessageSendParams) (*adk.Task, error) {
	fake.handleMessageSendMutex.Lock()
	ret, specificReturn := fake.handleMessageSendReturnsOnCall[len(fake.handleMessageSendArgsForCall)]
	fake.handleMessageSendArgsForCall = append(fake.handleMessageSendArgsForCall, struct {
		arg1 context.Context
		arg2 adk.MessageSendParams
	}{arg1, arg2})
	stub := fake.HandleMessageSendStub
	fakeReturns := fake.handleMessageSendReturns
	fake.recordInvocation("HandleMessageSend", []interface{}{arg1, arg2})
	fake.handleMessageSendMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMessageHandler) HandleMessageSendCallCount() int {
	fake.handleMessageSendMutex.RLock()
	defer fake.handleMessageSendMutex.RUnlock()
	return len(fake.handleMessageSendArgsForCall)
}

func (fake *FakeMessageHandler) HandleMessageSendCalls(stub func(context.Context, adk.MessageSendParams) (*adk.Task, error)) {
	fake.handleMessageSendMutex.Lock()
	defer fake.handleMessageSendMutex.Unlock()
	fake.HandleMessageSendStub = stub
}

func (fake *FakeMessageHandler) HandleMessageSendArgsForCall(i int) (context.Context, adk.MessageSendParams) {
	fake.handleMessageSendMutex.RLock()
	defer fake.handleMessageSendMutex.RUnlock()
	argsForCall := fake.handleMessageSendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMessageHandler) HandleMessageSendReturns(result1 *adk.Task, result2 error) {
	fake.handleMessageSendMutex.Lock()
	defer fake.handleMessageSendMutex.Unlock()
	fake.HandleMessageSendStub = nil
	fake.handleMessageSendReturns = struct {
		result1 *adk.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeMessageHandler) HandleMessageSendReturnsOnCall(i int, result1 *adk.Task, result2 error) {
	fake.handleMessageSendMutex.Lock()
	defer fake.handleMessageSendMutex.Unlock()
	fake.HandleMessageSendStub = nil
	if fake.handleMessageSendReturnsOnCall == nil {
		fake.handleMessageSendReturnsOnCall = make(map[int]struct {
			result1 *adk.Task
			result2 error
		})
	}
	fake.handleMessageSendReturnsOnCall[i] = struct {
		result1 *adk.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeMessageHandler) HandleMessageStream(arg1 context.Context, arg2 adk.MessageSendParams) error {
	fake.handleMessageStreamMutex.Lock()
	ret, specificReturn := fake.handleMessageStreamReturnsOnCall[len(fake.handleMessageStreamArgsForCall)]
	fake.handleMessageStreamArgsForCall = append(fake.handleMessageStreamArgsForCall, struct {
		arg1 context.Context
		arg2 adk.MessageSendParams
	}{arg1, arg2})
	stub := fake.HandleMessageStreamStub
	fakeReturns := fake.handleMessageStreamReturns
	fake.recordInvocation("HandleMessageStream", []interface{}{arg1, arg2})
	fake.handleMessageStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessageHandler) HandleMessageStreamCallCount() int {
	fake.handleMessageStreamMutex.RLock()
	defer fake.handleMessageStreamMutex.RUnlock()
	return len(fake.handleMessageStreamArgsForCall)
}

func (fake *FakeMessageHandler) HandleMessageStreamCalls(stub func(context.Context, adk.MessageSendParams) error) {
	fake.handleMessageStreamMutex.Lock()
	defer fake.handleMessageStreamMutex.Unlock()
	fake.HandleMessageStreamStub = stub
}

func (fake *FakeMessageHandler) HandleMessageStreamArgsForCall(i int) (context.Context, adk.MessageSendParams) {
	fake.handleMessageStreamMutex.RLock()
	defer fake.handleMessageStreamMutex.RUnlock()
	argsForCall := fake.handleMessageStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMessageHandler) HandleMessageStreamReturns(result1 error) {
	fake.handleMessageStreamMutex.Lock()
	defer fake.handleMessageStreamMutex.Unlock()
	fake.HandleMessageStreamStub = nil
	fake.handleMessageStreamReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageHandler) HandleMessageStreamReturnsOnCall(i int, result1 error) {
	fake.handleMessageStreamMutex.Lock()
	defer fake.handleMessageStreamMutex.Unlock()
	fake.HandleMessageStreamStub = nil
	if fake.handleMessageStreamReturnsOnCall == nil {
		fake.handleMessageStreamReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleMessageStreamReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMessageSendMutex.RLock()
	defer fake.handleMessageSendMutex.RUnlock()
	fake.handleMessageStreamMutex.RLock()
	defer fake.handleMessageStreamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessageHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.MessageHandler = new(FakeMessageHandler)
