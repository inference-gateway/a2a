// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/inference-gateway/a2a/adk/server"
)

type FakeResponseSender struct {
	SendErrorStub        func(*gin.Context, interface{}, int, string)
	sendErrorMutex       sync.RWMutex
	sendErrorArgsForCall []struct {
		arg1 *gin.Context
		arg2 interface{}
		arg3 int
		arg4 string
	}
	SendSuccessStub        func(*gin.Context, interface{}, interface{})
	sendSuccessMutex       sync.RWMutex
	sendSuccessArgsForCall []struct {
		arg1 *gin.Context
		arg2 interface{}
		arg3 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResponseSender) SendError(arg1 *gin.Context, arg2 interface{}, arg3 int, arg4 string) {
	fake.sendErrorMutex.Lock()
	fake.sendErrorArgsForCall = append(fake.sendErrorArgsForCall, struct {
		arg1 *gin.Context
		arg2 interface{}
		arg3 int
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SendErrorStub
	fake.recordInvocation("SendError", []interface{}{arg1, arg2, arg3, arg4})
	fake.sendErrorMutex.Unlock()
	if stub != nil {
		fake.SendErrorStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeResponseSender) SendErrorCallCount() int {
	fake.sendErrorMutex.RLock()
	defer fake.sendErrorMutex.RUnlock()
	return len(fake.sendErrorArgsForCall)
}

func (fake *FakeResponseSender) SendErrorCalls(stub func(*gin.Context, interface{}, int, string)) {
	fake.sendErrorMutex.Lock()
	defer fake.sendErrorMutex.Unlock()
	fake.SendErrorStub = stub
}

func (fake *FakeResponseSender) SendErrorArgsForCall(i int) (*gin.Context, interface{}, int, string) {
	fake.sendErrorMutex.RLock()
	defer fake.sendErrorMutex.RUnlock()
	argsForCall := fake.sendErrorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeResponseSender) SendSuccess(arg1 *gin.Context, arg2 interface{}, arg3 interface{}) {
	fake.sendSuccessMutex.Lock()
	fake.sendSuccessArgsForCall = append(fake.sendSuccessArgsForCall, struct {
		arg1 *gin.Context
		arg2 interface{}
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.SendSuccessStub
	fake.recordInvocation("SendSuccess", []interface{}{arg1, arg2, arg3})
	fake.sendSuccessMutex.Unlock()
	if stub != nil {
		fake.SendSuccessStub(arg1, arg2, arg3)
	}
}

func (fake *FakeResponseSender) SendSuccessCallCount() int {
	fake.sendSuccessMutex.RLock()
	defer fake.sendSuccessMutex.RUnlock()
	return len(fake.sendSuccessArgsForCall)
}

func (fake *FakeResponseSender) SendSuccessCalls(stub func(*gin.Context, interface{}, interface{})) {
	fake.sendSuccessMutex.Lock()
	defer fake.sendSuccessMutex.Unlock()
	fake.SendSuccessStub = stub
}

func (fake *FakeResponseSender) SendSuccessArgsForCall(i int) (*gin.Context, interface{}, interface{}) {
	fake.sendSuccessMutex.RLock()
	defer fake.sendSuccessMutex.RUnlock()
	argsForCall := fake.sendSuccessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeResponseSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendErrorMutex.RLock()
	defer fake.sendErrorMutex.RUnlock()
	fake.sendSuccessMutex.RLock()
	defer fake.sendSuccessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResponseSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.ResponseSender = new(FakeResponseSender)
