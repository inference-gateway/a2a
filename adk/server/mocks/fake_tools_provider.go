// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/inference-gateway/a2a/adk/server"
)

type FakeToolsProvider struct {
	GetSupportedToolsStub        func() []string
	getSupportedToolsMutex       sync.RWMutex
	getSupportedToolsArgsForCall []struct {
	}
	getSupportedToolsReturns struct {
		result1 []string
	}
	getSupportedToolsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetToolDefinitionsStub        func() []server.A2ATool
	getToolDefinitionsMutex       sync.RWMutex
	getToolDefinitionsArgsForCall []struct {
	}
	getToolDefinitionsReturns struct {
		result1 []server.A2ATool
	}
	getToolDefinitionsReturnsOnCall map[int]struct {
		result1 []server.A2ATool
	}
	HandleToolCallStub        func(server.A2AToolCall) (string, error)
	handleToolCallMutex       sync.RWMutex
	handleToolCallArgsForCall []struct {
		arg1 server.A2AToolCall
	}
	handleToolCallReturns struct {
		result1 string
		result2 error
	}
	handleToolCallReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IsToolSupportedStub        func(string) bool
	isToolSupportedMutex       sync.RWMutex
	isToolSupportedArgsForCall []struct {
		arg1 string
	}
	isToolSupportedReturns struct {
		result1 bool
	}
	isToolSupportedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeToolsProvider) GetSupportedTools() []string {
	fake.getSupportedToolsMutex.Lock()
	ret, specificReturn := fake.getSupportedToolsReturnsOnCall[len(fake.getSupportedToolsArgsForCall)]
	fake.getSupportedToolsArgsForCall = append(fake.getSupportedToolsArgsForCall, struct {
	}{})
	stub := fake.GetSupportedToolsStub
	fakeReturns := fake.getSupportedToolsReturns
	fake.recordInvocation("GetSupportedTools", []interface{}{})
	fake.getSupportedToolsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeToolsProvider) GetSupportedToolsCallCount() int {
	fake.getSupportedToolsMutex.RLock()
	defer fake.getSupportedToolsMutex.RUnlock()
	return len(fake.getSupportedToolsArgsForCall)
}

func (fake *FakeToolsProvider) GetSupportedToolsCalls(stub func() []string) {
	fake.getSupportedToolsMutex.Lock()
	defer fake.getSupportedToolsMutex.Unlock()
	fake.GetSupportedToolsStub = stub
}

func (fake *FakeToolsProvider) GetSupportedToolsReturns(result1 []string) {
	fake.getSupportedToolsMutex.Lock()
	defer fake.getSupportedToolsMutex.Unlock()
	fake.GetSupportedToolsStub = nil
	fake.getSupportedToolsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeToolsProvider) GetSupportedToolsReturnsOnCall(i int, result1 []string) {
	fake.getSupportedToolsMutex.Lock()
	defer fake.getSupportedToolsMutex.Unlock()
	fake.GetSupportedToolsStub = nil
	if fake.getSupportedToolsReturnsOnCall == nil {
		fake.getSupportedToolsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getSupportedToolsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeToolsProvider) GetToolDefinitions() []server.A2ATool {
	fake.getToolDefinitionsMutex.Lock()
	ret, specificReturn := fake.getToolDefinitionsReturnsOnCall[len(fake.getToolDefinitionsArgsForCall)]
	fake.getToolDefinitionsArgsForCall = append(fake.getToolDefinitionsArgsForCall, struct {
	}{})
	stub := fake.GetToolDefinitionsStub
	fakeReturns := fake.getToolDefinitionsReturns
	fake.recordInvocation("GetToolDefinitions", []interface{}{})
	fake.getToolDefinitionsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeToolsProvider) GetToolDefinitionsCallCount() int {
	fake.getToolDefinitionsMutex.RLock()
	defer fake.getToolDefinitionsMutex.RUnlock()
	return len(fake.getToolDefinitionsArgsForCall)
}

func (fake *FakeToolsProvider) GetToolDefinitionsCalls(stub func() []server.A2ATool) {
	fake.getToolDefinitionsMutex.Lock()
	defer fake.getToolDefinitionsMutex.Unlock()
	fake.GetToolDefinitionsStub = stub
}

func (fake *FakeToolsProvider) GetToolDefinitionsReturns(result1 []server.A2ATool) {
	fake.getToolDefinitionsMutex.Lock()
	defer fake.getToolDefinitionsMutex.Unlock()
	fake.GetToolDefinitionsStub = nil
	fake.getToolDefinitionsReturns = struct {
		result1 []server.A2ATool
	}{result1}
}

func (fake *FakeToolsProvider) GetToolDefinitionsReturnsOnCall(i int, result1 []server.A2ATool) {
	fake.getToolDefinitionsMutex.Lock()
	defer fake.getToolDefinitionsMutex.Unlock()
	fake.GetToolDefinitionsStub = nil
	if fake.getToolDefinitionsReturnsOnCall == nil {
		fake.getToolDefinitionsReturnsOnCall = make(map[int]struct {
			result1 []server.A2ATool
		})
	}
	fake.getToolDefinitionsReturnsOnCall[i] = struct {
		result1 []server.A2ATool
	}{result1}
}

func (fake *FakeToolsProvider) HandleToolCall(arg1 server.A2AToolCall) (string, error) {
	fake.handleToolCallMutex.Lock()
	ret, specificReturn := fake.handleToolCallReturnsOnCall[len(fake.handleToolCallArgsForCall)]
	fake.handleToolCallArgsForCall = append(fake.handleToolCallArgsForCall, struct {
		arg1 server.A2AToolCall
	}{arg1})
	stub := fake.HandleToolCallStub
	fakeReturns := fake.handleToolCallReturns
	fake.recordInvocation("HandleToolCall", []interface{}{arg1})
	fake.handleToolCallMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeToolsProvider) HandleToolCallCallCount() int {
	fake.handleToolCallMutex.RLock()
	defer fake.handleToolCallMutex.RUnlock()
	return len(fake.handleToolCallArgsForCall)
}

func (fake *FakeToolsProvider) HandleToolCallCalls(stub func(server.A2AToolCall) (string, error)) {
	fake.handleToolCallMutex.Lock()
	defer fake.handleToolCallMutex.Unlock()
	fake.HandleToolCallStub = stub
}

func (fake *FakeToolsProvider) HandleToolCallArgsForCall(i int) server.A2AToolCall {
	fake.handleToolCallMutex.RLock()
	defer fake.handleToolCallMutex.RUnlock()
	argsForCall := fake.handleToolCallArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeToolsProvider) HandleToolCallReturns(result1 string, result2 error) {
	fake.handleToolCallMutex.Lock()
	defer fake.handleToolCallMutex.Unlock()
	fake.HandleToolCallStub = nil
	fake.handleToolCallReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeToolsProvider) HandleToolCallReturnsOnCall(i int, result1 string, result2 error) {
	fake.handleToolCallMutex.Lock()
	defer fake.handleToolCallMutex.Unlock()
	fake.HandleToolCallStub = nil
	if fake.handleToolCallReturnsOnCall == nil {
		fake.handleToolCallReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.handleToolCallReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeToolsProvider) IsToolSupported(arg1 string) bool {
	fake.isToolSupportedMutex.Lock()
	ret, specificReturn := fake.isToolSupportedReturnsOnCall[len(fake.isToolSupportedArgsForCall)]
	fake.isToolSupportedArgsForCall = append(fake.isToolSupportedArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsToolSupportedStub
	fakeReturns := fake.isToolSupportedReturns
	fake.recordInvocation("IsToolSupported", []interface{}{arg1})
	fake.isToolSupportedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeToolsProvider) IsToolSupportedCallCount() int {
	fake.isToolSupportedMutex.RLock()
	defer fake.isToolSupportedMutex.RUnlock()
	return len(fake.isToolSupportedArgsForCall)
}

func (fake *FakeToolsProvider) IsToolSupportedCalls(stub func(string) bool) {
	fake.isToolSupportedMutex.Lock()
	defer fake.isToolSupportedMutex.Unlock()
	fake.IsToolSupportedStub = stub
}

func (fake *FakeToolsProvider) IsToolSupportedArgsForCall(i int) string {
	fake.isToolSupportedMutex.RLock()
	defer fake.isToolSupportedMutex.RUnlock()
	argsForCall := fake.isToolSupportedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeToolsProvider) IsToolSupportedReturns(result1 bool) {
	fake.isToolSupportedMutex.Lock()
	defer fake.isToolSupportedMutex.Unlock()
	fake.IsToolSupportedStub = nil
	fake.isToolSupportedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeToolsProvider) IsToolSupportedReturnsOnCall(i int, result1 bool) {
	fake.isToolSupportedMutex.Lock()
	defer fake.isToolSupportedMutex.Unlock()
	fake.IsToolSupportedStub = nil
	if fake.isToolSupportedReturnsOnCall == nil {
		fake.isToolSupportedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isToolSupportedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeToolsProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSupportedToolsMutex.RLock()
	defer fake.getSupportedToolsMutex.RUnlock()
	fake.getToolDefinitionsMutex.RLock()
	defer fake.getToolDefinitionsMutex.RUnlock()
	fake.handleToolCallMutex.RLock()
	defer fake.handleToolCallMutex.RUnlock()
	fake.isToolSupportedMutex.RLock()
	defer fake.isToolSupportedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeToolsProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.ToolsProvider = new(FakeToolsProvider)
